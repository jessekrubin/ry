import sys

import pytest

import ry


class TestXxh32Hasher:
    def test_xxh32_hasher_digest(self) -> None:
        assert ry.xxh32(b"a").digest() == (1426945110).to_bytes(4, "big")
        assert ry.xxh32(b"a", 0).digest() == (1426945110).to_bytes(4, "big")
        assert ry.xxh32(b"a", 1).digest() == (4111757423).to_bytes(4, "big")
        assert ry.xxh32(b"a", 2**32 - 1).digest() == (3443684653).to_bytes(4, "big")

    def test_xxh32_hasher_intdigest(self) -> None:
        assert ry.xxh32(b"a").intdigest() == 1426945110
        assert ry.xxh32(b"a", 0).intdigest() == 1426945110
        assert ry.xxh32(b"a", 1).intdigest() == 4111757423
        assert ry.xxh32(b"a", 2**32 - 1).intdigest() == 3443684653

    def test_xxh32_hasher_hexdigest(self) -> None:
        assert ry.xxh32(b"a").hexdigest() == (1426945110).to_bytes(4, "big").hex()
        assert ry.xxh32(b"a", 0).hexdigest() == (1426945110).to_bytes(4, "big").hex()
        assert ry.xxh32(b"a", 1).hexdigest() == (4111757423).to_bytes(4, "big").hex()
        assert (
            ry.xxh32(b"a", 2**32 - 1).hexdigest()
            == (3443684653).to_bytes(4, "big").hex()
        )

    def test_xxh32_hasher_copy(self) -> None:
        h = ry.xxh32()
        h.update(b"hello")
        h2 = h.copy()
        assert h.digest() == h2.digest()
        assert h.intdigest() == h2.intdigest()
        assert h.hexdigest() == h2.hexdigest()
        h2.update(b"world")
        assert h.digest() != h2.digest()
        assert h.intdigest() != h2.intdigest()
        assert h.hexdigest() != h2.hexdigest()

        assert h2.digest() == ry.xxh32(b"helloworld").digest()
        assert h2.intdigest() == ry.xxh32(b"helloworld").intdigest()
        assert h2.hexdigest() == ry.xxh32(b"helloworld").hexdigest()


def test_xxh32_digest() -> None:
    assert ry.xxh32_digest(b"a") == (1426945110).to_bytes(4, "big")
    assert ry.xxh32_digest(b"a", 0) == (1426945110).to_bytes(4, "big")
    assert ry.xxh32_digest(b"a", 1) == (4111757423).to_bytes(4, "big")
    assert ry.xxh32_digest(b"a", 2**32 - 1) == (3443684653).to_bytes(4, "big")


def test_xxh32_intdigest() -> None:
    assert ry.xxh32_intdigest(b"a") == 1426945110
    assert ry.xxh32_intdigest(b"a", 0) == 1426945110
    assert ry.xxh32_intdigest(b"a", 1) == 4111757423
    assert ry.xxh32_intdigest(b"a", 2**32 - 1) == 3443684653


def test_xxh32_hexdigest() -> None:
    assert ry.xxh32_hexdigest(b"a") == (1426945110).to_bytes(4, "big").hex()
    assert ry.xxh32_hexdigest(b"a", 0) == (1426945110).to_bytes(4, "big").hex()
    assert ry.xxh32_hexdigest(b"a", 1) == (4111757423).to_bytes(4, "big").hex()
    assert ry.xxh32_hexdigest(b"a", 2**32 - 1) == (3443684653).to_bytes(4, "big").hex()


XX32_SEEDS = [0, 1, 2**32 - 1]
XX64_SEEDS = [0, 1, 2**64 - 1]
XX128_SEEDS = [0, 1, 2**64 - 1]  # same as 64-bit seeds
XX32_TEST_DATA = [
    (b"", (0x2CC5D05, 0xB2CB792, 0x9061DA9D)),
    (b"a", (0x550D7456, 0xF514706F, 0xCD42752D)),
    (b"b", (0xA20CADBF, 0x886ED2A6, 0xD49CB133)),
    (b"c", (0xEEB00F1B, 0xC1BC4A97, 0x3938FB67)),
    (b"d", (0x42F35290, 0xF490706A, 0x5F6AAD54)),
    (b"e", (0xF95AD1C7, 0x65723F4F, 0x6A017D13)),
    (b"f", (0x67188E74, 0x8AF1B2E5, 0x22AC7ADC)),
    (b"fo", (0x1627EF93, 0xAD993D0D, 0xA065BB71)),
    (b"foo", (0xE20F0DD9, 0x1742761F, 0xC71B24C7)),
    (b"foob", (0x5D81FDB0, 0xAA10C4DB, 0x3747BE19)),
    (b"fooba", (0x940E43AA, 0xA1AE0A42, 0xC42B0845)),
    (b"foobar", (0xEDA34AAF, 0x15D5E3C7, 0xEB2B399F)),
    (b"\x00", (0xCF65B03E, 0x2DB596B, 0x36705D21)),
    (b"a\x00", (0x19832F52, 0xFA8508FA, 0xE6B3D413)),
    (b"b\x00", (0xC450176C, 0xDC15DB21, 0x5BB0C61B)),
    (b"c\x00", (0x369EBF66, 0x4B1E9E6E, 0x391836AE)),
    (b"d\x00", (0x83EAC862, 0x169BEA4B, 0x46A3D7E7)),
    (b"e\x00", (0xDECFA5E8, 0x1AFB996C, 0x1AABAADB)),
    (b"f\x00", (0x77161E97, 0xA85022D, 0x582B0FCB)),
    (b"fo\x00", (0xF937113, 0xC7975CB8, 0xC4003180)),
    (b"foo\x00", (0xD75AB8C0, 0x9A044BFA, 0xC2763F7E)),
    (b"foob\x00", (0x97A0AFC8, 0x929D555A, 0x212479A6)),
    (b"fooba\x00", (0x8C134101, 0x678BF036, 0xE2B3EF20)),
    (b"foobar\x00", (0x93AA655B, 0xE9186F15, 0x355D03B3)),
    (b"ch", (0x5982E9E5, 0x9969359, 0x5D777EF)),
    (b"cho", (0x698806FB, 0x915D435E, 0xD041E507)),
    (b"chon", (0x4E9F6F78, 0x5EC41440, 0x5A0F66E1)),
    (b"chong", (0x2BBEA878, 0xFB1DE371, 0x5BEB4C58)),
    (b"chongo", (0xEB43FB14, 0xF0DEFDAD, 0x4A3E507E)),
    (b"chongo ", (0xEB651B23, 0x9811DF51, 0x487E42DB)),
    (b"chongo w", (0xCA930D50, 0x455B3613, 0xD97EADE8)),
    (b"chongo wa", (0xF398A318, 0xED4D0E43, 0xACF328B4)),
    (b"chongo was", (0xBAA72F01, 0x7714FF1E, 0xA8EE800D)),
    (b"chongo was ", (0xD2A314FD, 0xFD22975B, 0xDF16F981)),
    (b"chongo was h", (0xEBA3B7CC, 0x3563113D, 0xB5B6A5F6)),
    (b"chongo was he", (0x3D3485ED, 0x34952E9C, 0x8FCFFCB7)),
    (b"chongo was her", (0x1D6CDEB2, 0xD7B7725D, 0xAA952019)),
    (b"chongo was here", (0x26FEDDD1, 0x1891AC8B, 0xC80C39A6)),
    (b"chongo was here!", (0x93AD7B36, 0xEEB25074, 0x9B059748)),
    (b"chongo was here!\n", (0x66557C9, 0xA82B5763, 0x84870D22)),
    (b"ch\x00", (0x5FA27BC, 0x5C20A7D1, 0x75288C3A)),
    (b"cho\x00", (0x5FB5BC1E, 0xBE58D318, 0xCB7D0E3)),
    (b"chon\x00", (0x54E5671B, 0xD906815F, 0x59C6FAD4)),
    (b"chong\x00", (0x685C5BB7, 0x7BF4E5CB, 0x3AC78763)),
    (b"chongo\x00", (0x3A36818A, 0x367BED2C, 0xCDA39088)),
    (b"chongo \x00", (0xC1885707, 0x88D0D947, 0x6570BEA7)),
    (b"chongo w\x00", (0x943AC410, 0x5E09DF4, 0x92FF88E8)),
    (b"chongo wa\x00", (0x21513547, 0xC652ABB5, 0xB4DDD864)),
    (b"chongo was\x00", (0xD5E50829, 0x6083D90E, 0x3A57724)),
    (b"chongo was \x00", (0x7C466426, 0x2EE310C1, 0xB766F64D)),
    (b"chongo was h\x00", (0x4CC9FAE8, 0xE108A3A7, 0xB88AE090)),
    (b"chongo was he\x00", (0x25B5C4F, 0x3D59A57B, 0x291B48C6)),
    (b"chongo was her\x00", (0x76D9569E, 0x63432887, 0x95A60C15)),
    (b"chongo was here\x00", (0x1C9B6950, 0xCB77B6CC, 0x8999A0B1)),
    (b"chongo was here!\x00", (0xDC9E4010, 0x9FCCA316, 0xE6348C44)),
    (b"chongo was here!\n\x00", (0x47F68FB6, 0x9DC89E27, 0x9F2785B)),
    (b"cu", (0xBA8AA93D, 0xF7E1E4DC, 0xFFBED97F)),
    (b"cur", (0x87F7F595, 0xBCFF95AD, 0xBB4CCABA)),
    (b"curd", (0x40141FA7, 0xD0F7EF1, 0xB3E139CD)),
    (b"curds", (0x40BED110, 0xF2E75CC7, 0xDEBA895E)),
    (b"curds ", (0x3B1A0653, 0xB3E09C6D, 0x2DFF2282)),
    (b"curds a", (0x43D5FB75, 0x56207C51, 0x7C1443B2)),
    (b"curds an", (0x4A83DDA7, 0x9C9F1C2C, 0x9185ACC4)),
    (b"curds and", (0x73862C2B, 0x9471F313, 0xB0EC41F9)),
    (b"curds and ", (0xBEADAFBE, 0x4737C04F, 0x32B09074)),
    (b"curds and w", (0x7A5A309A, 0x6DB6B965, 0x8B73A7A8)),
    (b"curds and wh", (0x507FDB38, 0x8DCE28E, 0xD2D02260)),
    (b"curds and whe", (0x901E4374, 0x1199F4AD, 0xA4D3A9FA)),
    (b"curds and whey", (0xF92A3202, 0x56DB278D, 0x94B68398)),
    (b"curds and whey\n", (0x7BB790F2, 0xF61FE2CC, 0x8E045E06)),
    (b"cu\x00", (0x306FEC94, 0xF3BD8501, 0x17B344DE)),
    (b"cur\x00", (0x9AC2995F, 0x2EBF197B, 0xBD2B02F7)),
    (b"curd\x00", (0x2FF456A2, 0x80053416, 0xA1B940DC)),
    (b"curds\x00", (0x6351D7E4, 0x587C15C1, 0xB2772D6B)),
    (b"curds \x00", (0xAA773201, 0xCEC7FB2D, 0x8DC3B1CC)),
    (b"curds a\x00", (0x5A780894, 0x306A62A9, 0xB9728A5C)),
    (b"curds an\x00", (0xA078ED7F, 0x1B540A9D, 0xF6110C03)),
    (b"curds and\x00", (0x9E9CDF28, 0x7E124974, 0x3716881B)),
    (b"curds and \x00", (0xA76A5D0F, 0x20FF2024, 0x23399A78)),
    (b"curds and w\x00", (0x979799DC, 0x30C77A79, 0x4CE687)),
    (b"curds and wh\x00", (0x83FE296D, 0xF1668819, 0xA173C02)),
    (b"curds and whe\x00", (0xC61327A5, 0x5D0B31E8, 0x9AF8EB2)),
    (b"curds and whey\x00", (0xC221D805, 0x8CCB10E4, 0x6FBF2C1B)),
    (b"curds and whey\n\x00", (0x9F95174A, 0xE42F36A3, 0x8A9AA061)),
    (b"hi", (0xDAA7A564, 0x1EF9E60D, 0x7602E63C)),
    (b"hi\x00", (0x86060CA7, 0x730B07B9, 0xFA2F22D4)),
    (b"hello", (0xFB0077F9, 0xFCFFFBA9, 0x2711808B)),
    (b"hello\x00", (0x76C3F8E8, 0x161D5DE2, 0xEFF5181D)),
    (b"\xff\x00\x00\x01", (0x8CF76E01, 0x148CD61, 0x2294EFFC)),
    (b"\x01\x00\x00\xff", (0x74701400, 0xAABDEF08, 0xEDE70159)),
    (b"\xff\x00\x00\x02", (0x2D328EEA, 0xD382F44B, 0x6A5B42CE)),
    (b"\x02\x00\x00\xff", (0x215C4BE9, 0xAA5142CE, 0xE1745D72)),
    (b"\xff\x00\x00\x03", (0x63FBE444, 0x7E2CAD3A, 0xAF3501EF)),
    (b"\x03\x00\x00\xff", (0x87CF8C91, 0xB91A4B68, 0xD4103A99)),
    (b"\xff\x00\x00\x04", (0x97F32FED, 0x25C01F14, 0x59543FDB)),
    (b"\x04\x00\x00\xff", (0xB140E319, 0x6A440B3A, 0x324C2F3E)),
    (b"@QND", (0x31F2A306, 0xA2168C77, 0xE7675BF9)),
    (b"DNQ@", (0x386BF6B2, 0x4AFF4F1D, 0x87B08891)),
    (b"@QNJ", (0xBBB698E4, 0xCE72E846, 0x8C810B06)),
    (b"JNQ@", (0x12184E33, 0x1F537D37, 0x978F6C40)),
    (b"@QNT", (0xA753A55F, 0x1299785E, 0x907585C8)),
    (b"TNQ@", (0x28978B60, 0xD6F0BF84, 0x1911915)),
    (b"127.0.0.1", (0x909B453F, 0x7C1F290A, 0x7BFB2C4A)),
    (b"127.0.0.1\x00", (0xBA160972, 0x214D09C7, 0x45D1B13C)),
    (b"127.0.0.2", (0xD31C4218, 0xD17902E5, 0x739909DB)),
    (b"127.0.0.2\x00", (0xF40B20D1, 0xCFFEFF55, 0xA8A10F7)),
    (b"127.0.0.3", (0x5B1EF198, 0x7622F625, 0xC5D1F20E)),
    (b"127.0.0.3\x00", (0x56BD1A19, 0xE06763B0, 0x97FE0D01)),
    (b"64.81.78.68", (0xE2A0AACA, 0x5E4410FD, 0xFE9BF545)),
    (b"64.81.78.68\x00", (0x175BE3B5, 0x5FC12F88, 0x7D483920)),
    (b"64.81.78.74", (0xC08E1FBD, 0x7DBC9095, 0x8B4B144F)),
    (b"64.81.78.74\x00", (0xE9A41CB9, 0x2DBA6F5, 0x78C4ADD9)),
    (b"64.81.78.84", (0xD1A2E13D, 0xDE8739AB, 0x4A965390)),
    (b"64.81.78.84\x00", (0x6BED55D4, 0xEBA06FED, 0x6A439E3B)),
    (b"feedface", (0x96630198, 0x41A67CC2, 0x2C366C5A)),
    (b"feedface\x00", (0xD6657377, 0x6E97221C, 0x5BD1C7D2)),
    (b"feedfacedaffdeed", (0x62576B20, 0x6792240, 0x37442714)),
    (b"feedfacedaffdeed\x00", (0x46CD408E, 0x84F6E388, 0x7B37B762)),
    (b"feedfacedeadbeef", (0xFD14E15E, 0x26DF4696, 0xA7E7203F)),
    (b"feedfacedeadbeef\x00", (0xA74AF0C7, 0xCD46DBC8, 0xBD9229E)),
    (b"line 1\nline 2\nline 3", (0x4961AE4F, 0x13768552, 0xD650F75B)),
]
XX64_TEST_DATA = [
    (b"", (0xEF46DB3751D8E999, 0xD5AFBA1336A3BE4B, 0x298F4C84B24F5380)),
    (b"a", (0xD24EC4F1A98C6E5B, 0xDEC2BC81C3CD46C6, 0x60C43759873ECE62)),
    (b"b", (0x78452AA11AF39F9B, 0x5938689CB3656A3C, 0x6D9736788D9F989D)),
    (b"c", (0xA3DAD144C40657ED, 0xA9F80FCC47A33E41, 0x53ED55EA533E6ABD)),
    (b"d", (0x5000D8F2907D14E4, 0x51CA7ED8F2E96488, 0x80FFDB8FB90330FF)),
    (b"e", (0x49EAC513F7718934, 0xB6E479D65AE0D6FB, 0xE0D5A3FD9EAEB8F2)),
    (b"f", (0xD00DBA5CF02AEE4D, 0x54BCC20D41577791, 0xC0B677EE8434B009)),
    (b"fo", (0x9716A94630A2E8B0, 0x87E0E70F0C7DF303, 0x871A6BADA497B5CD)),
    (b"foo", (0x33BF00A859C4BA3F, 0xC34823C5BF4F2CBD, 0xC5BFEEEC9D3337EA)),
    (b"foob", (0x27B271E5D617029E, 0xED80A406FD5CF958, 0x594DB89E3182F8C6)),
    (b"fooba", (0x928DBEFA262670DA, 0xBBAD38B9ADC14AA0, 0x5EB195A7307B0FCB)),
    (b"foobar", (0xA2AA05ED9085AAF9, 0xF83230D70D4CA00E, 0xE5BE1991488CB9C5)),
    (b"\x00", (0xE934A84ADB052768, 0x771917C7F6EE2451, 0x8BA3328805E37C90)),
    (b"a\x00", (0xE513E02C99167F96, 0xB949E49DAAEB4B4F, 0xE13B5F69B0D1F7AD)),
    (b"b\x00", (0xC9E32F1DB58693F5, 0x87491323FEA08E86, 0x6AE2BABE3258AE32)),
    (b"c\x00", (0x2E372943AE2F6B70, 0x41FC455DE5BD575, 0x2C9B4F332BB4CADC)),
    (b"d\x00", (0x59D86BDBC85715BD, 0xFCC2FB75711A819A, 0xFFE4B3F77D4CFD96)),
    (b"e\x00", (0xAB89DC8183C96307, 0x7ACB982FFE2786E3, 0x983F052A8DE61D09)),
    (b"f\x00", (0x6F7EDCC621762F0E, 0x509FD3AB3183619, 0x5BACA153B3AEC6B0)),
    (b"fo\x00", (0xDDF6067693DCBB45, 0xEFDD5FD06F2CAFD2, 0x79CCCBE391C397CA)),
    (b"foo\x00", (0x9E63E8E526BFF86F, 0xC24A4DD0C1D71493, 0xD00514D2DD1EE8A8)),
    (b"foob\x00", (0xA3ACBD19ED219C0F, 0x5C0537E5ACB07C90, 0xC46B0598C4C79652)),
    (b"fooba\x00", (0xA7970DD537275FCF, 0x8A5AF2F6D3A7B945, 0x7DED358A2484056F)),
    (b"foobar\x00", (0xCEBFEDFBBA73DE25, 0x5F94E39BC583A196, 0xF414F96920020004)),
    (b"ch", (0x50E7F05E357617E0, 0x216A453293CFFEF5, 0x600A8B38E7AACBEE)),
    (b"cho", (0x1E7B1AD1E370C511, 0x6B7FB7F16ACB437, 0x48DBB8449AD1C204)),
    (b"chon", (0xF626031840BC7313, 0x84A430FFC912A76E, 0x4A71078C55728FEC)),
    (b"chong", (0xD532BFDCA71B859D, 0x4990EC4E81F135FF, 0x44F08EA1C96EBC4C)),
    (b"chongo", (0xA4F57A7C1A787678, 0xC199151899AE890A, 0xF904D25D69AEF09D)),
    (b"chongo ", (0xA95276139AF97428, 0xBC5CE65F2D709FFD, 0x1551E5473531322)),
    (b"chongo w", (0xD80676B8747CB3D6, 0x82397BAAEC2BD3AA, 0xB4F752E24A27CF9)),
    (b"chongo wa", (0x576FA1AB050E8198, 0x75D7C67B8B1A3BE3, 0x93B1A3BAA4813892)),
    (b"chongo was", (0xA2EA9B100BF98674, 0x4FB3CD95B2F8FFB9, 0x79EB9C3B24598AE5)),
    (b"chongo was ", (0xA21B76BC69CBCFD6, 0xFCDE751D17DF3EE2, 0xF7967B64ACAFB9E)),
    (b"chongo was h", (0xB49C08239E537C63, 0x90C6CBFF9F71B37D, 0x334F42128BE1047B)),
    (b"chongo was he", (0xB3FDC88FD2ECCA05, 0x7CC36A3C1355EADC, 0xB6F8C6D157029C42)),
    (b"chongo was her", (0x9F26F81FDF1BFF1C, 0x616B0CA5ACC3A7, 0x446442DD0B5540DA)),
    (b"chongo was here", (0x510928C48F0550, 0x43D3D73854846723, 0x98537C55D1FC5121)),
    (b"chongo was here!", (0x8F2CC5680771118C, 0x70D9177A89EA5499, 0x3AAE6080D99ED79F)),
    (
        b"chongo was here!\n",
        (0xF42E3E066820C193, 0xC4000E9ACABA2AD0, 0x12055156B03FF05),
    ),
    (b"ch\x00", (0xA75C97086EA2B603, 0xC0AABFFE8BAD41E5, 0x59C4087B2B4F0E13)),
    (b"cho\x00", (0x97DB2BD443810AC1, 0xFC55C044889B1594, 0x659F90E772096D2)),
    (b"chon\x00", (0x52FCD4E91A9EFB2B, 0x4D031D57A4B60FBF, 0x81C1E3E29ADC6C71)),
    (b"chong\x00", (0xB575D62162CF76E, 0x5EBA641C87AE8C39, 0x3B55357A8D854389)),
    (b"chongo\x00", (0x5EF8DC96839C724C, 0x4628057F4CF4EBFF, 0x66CF873E8747B880)),
    (b"chongo \x00", (0x49477446E8E4F3CA, 0xA829FF4BC2570858, 0x5243BDE69785B9D7)),
    (b"chongo w\x00", (0xFF5282BD6BFCC7B5, 0x97E67D0AE64C713B, 0x33D4316E5C83D196)),
    (b"chongo wa\x00", (0xF872C4370AE296EA, 0xDCD98160CDA1E845, 0x268D7D998347C5FD)),
    (b"chongo was\x00", (0xDBE5DF26F7BED003, 0xDBCBF2528437E385, 0x4F7A55B1749CB24F)),
    (b"chongo was \x00", (0xEC517C50D7B1C1BD, 0x3DC202BD8D5941E2, 0xEB73E876D718BFA)),
    (b"chongo was h\x00", (0x6DA5E280F75FB3DD, 0xD1D64D19DB715318, 0x4A33D3DF17A92049)),
    (
        b"chongo was he\x00",
        (0xE5BA572F816836D2, 0x556F831FBB4BDD08, 0x848083EAB54A732B),
    ),
    (b"chongo was her\x00", (0xF2BE50AD60A4D06E, 0x2B81060B4952212, 0xD36B7722BCE7B04)),
    (
        b"chongo was here\x00",
        (0x6D9175A4BB9E903F, 0x56E887F0B60AFA0F, 0x2B1D6A28EF454420),
    ),
    (
        b"chongo was here!\x00",
        (0x12311FA95D81BC62, 0xEF1A36E1447D9834, 0x994A41D57B124B8D),
    ),
    (
        b"chongo was here!\n\x00",
        (0x3F3255F2BE2993C4, 0x819BF6305B99C3FE, 0xC92F00B8C6ED354A),
    ),
    (b"cu", (0xF92250239313686B, 0x1742AD526631E037, 0x71ADC55BB211B6D9)),
    (b"cur", (0x466CE185A4C0C750, 0x3C7B680A0F41F3AC, 0x3EF684504EA93B61)),
    (b"curd", (0x6FF3872AEF4B8651, 0xCF353E8FEB3C8F7B, 0x558D9D5BA7416A84)),
    (b"curds", (0xD9FF306596D44244, 0xA8115049FBC2385A, 0xAF4C2CFB4E043B4D)),
    (b"curds ", (0x3700CD10FA03CA13, 0x1BB81C978CCEA73D, 0xBB63F6BE382E00FC)),
    (b"curds a", (0x1029019D6C70AF96, 0xFA198025D7AAA1BB, 0xF53D4E9C9A1667AA)),
    (b"curds an", (0x5C9161EB86F17E98, 0xFFAD4D1CF543CCFB, 0x6461DC6BB7F9B2C3)),
    (b"curds and", (0xA526D268C34C54CA, 0x66F52A1D2C4FEF89, 0xE9B9868119AFA6D7)),
    (b"curds and ", (0xDD98D1A296DC15BE, 0x29527A469EEB06D9, 0x1FA7F9DBA772E168)),
    (b"curds and w", (0x9657871083A50DAD, 0xD1FD777D8DA33221, 0xBBAF209E1B4C4F6)),
    (b"curds and wh", (0x65703B9EC15B1B0B, 0xA01E669A433A2EF7, 0x5CA99D4AE3EFC14A)),
    (b"curds and whe", (0xC80155AEAE33FAB3, 0x2A3B39734CB04F57, 0x8CEAB7B2A565B2A7)),
    (b"curds and whey", (0x28868F88194B0791, 0xC68FA8180C496B4B, 0x6D590B3CD17D4176)),
    (b"curds and whey\n", (0xB508E1F0C0C1FED3, 0x91A3C41FEE40EFDB, 0x66DCE1516F8BC5D4)),
    (b"cu\x00", (0x471B64FC4DB6A9EF, 0x3295B58953F6C063, 0xE4731D3604E18817)),
    (b"cur\x00", (0x431FFBB93E623C7, 0x2890FA18E6A27986, 0x6A95E7B164EE0960)),
    (b"curd\x00", (0x2B44FB5FD3767EFC, 0xF3228983EBF7AE1C, 0x52DBB9A7179FDAE0)),
    (b"curds\x00", (0xD924B907E5E4B82E, 0x58F2900FC1D169E0, 0x324530BFD31235DA)),
    (b"curds \x00", (0xA06D7E5791EE58F5, 0x7CFCF649AD47594F, 0x455FC6465333CCB1)),
    (b"curds a\x00", (0x3F2E5D7432EB5EB2, 0xF62D0DA57E3B5722, 0xA044206065EBCFE3)),
    (b"curds an\x00", (0x3BF4FBCDB7D8AAFE, 0x7234843F7793AD1A, 0x46C90C6256DDC196)),
    (b"curds and\x00", (0xC84BE4E1185CE184, 0x80DB924599A14677, 0x85D631EF9BFBA54F)),
    (b"curds and \x00", (0x45210644FD120EFA, 0x568140F1A973B76F, 0x6C383E8FDB42415B)),
    (b"curds and w\x00", (0xC4BD7AF71FDD0BEB, 0xA1406D6745C46004, 0x678BE83EBB260B1)),
    (b"curds and wh\x00", (0x7066228F42F6D8F6, 0x8A7197DEF1CE3E2D, 0x5473C146F4923221)),
    (
        b"curds and whe\x00",
        (0xB43AD5AA4D64F303, 0xA3949E878548EBEF, 0xD679DA3BD4E1ED6C),
    ),
    (
        b"curds and whey\x00",
        (0x365E93EB838909C5, 0xC8994719025BFB38, 0x750F8E7DEE8659AA),
    ),
    (
        b"curds and whey\n\x00",
        (0x10DDA80CCC7637FC, 0x65876E9E40C05941, 0x79303609DC40B4C4),
    ),
    (b"hi", (0xEA8842E9EA2638FA, 0xF3F6B696A2153B83, 0x9C5D1473543BD010)),
    (b"hi\x00", (0x59BD0D431B4FB4D2, 0xE300CB00A39E41DE, 0xA4BD7D1DC66F1BFF)),
    (b"hello", (0x26C7827D889F6DA3, 0x23DD71CB04D0A1B2, 0x1BF361DF0D21898)),
    (b"hello\x00", (0x54ADE4242FEC4E26, 0xE3AD5D764FCEDBCF, 0xBC3902259045F435)),
    (b"\xff\x00\x00\x01", (0x4ED08571477FF888, 0x57132CC94DAA9795, 0x1834E09F80D7F591)),
    (b"\x01\x00\x00\xff", (0xC3F46FECCCBFBC6E, 0x4F85DD41C428C8F0, 0x18D6A316E815DAEE)),
    (b"\xff\x00\x00\x02", (0x400BE77598EA174C, 0x50AB188D347E03EA, 0x62BEDBEFED9E17D)),
    (b"\x02\x00\x00\xff", (0xA138B6138C8F6E5F, 0xF3C61127CCBF28E9, 0xA193DDCC8314A162)),
    (b"\xff\x00\x00\x03", (0xF483F36B2A2582D7, 0x83F7C856215A051F, 0xDED6FEE362CDB721)),
    (b"\x03\x00\x00\xff", (0xC069C80CBE5C88FB, 0x58BF3630815CD2ED, 0x2CD3082EA38044F)),
    (b"\xff\x00\x00\x04", (0xA0C21B98AEED43CA, 0x7EFCD1A50C4EC4C7, 0xAA73824F924AB5C9)),
    (b"\x04\x00\x00\xff", (0xE8265E3ED97AB2BA, 0xE59DA93CC29890AB, 0x576063A273F1F22B)),
    (b"@QND", (0xF4F24CBF8495FC7D, 0x43BC59BAE8192CE4, 0xB6F54E9C04BF5381)),
    (b"DNQ@", (0xE21D7D11EC13BC95, 0x3051C21FC8DA9BAB, 0x6A0EE4F35F6A4AEA)),
    (b"@QNJ", (0x59B07922B47E9B91, 0x892455DD47EC13D1, 0x5181641A174C1891)),
    (b"JNQ@", (0x4E89AE038C5F0028, 0xA6B83885974AE0DF, 0xBF093D7D141B1179)),
    (b"@QNT", (0x7BE2961ED7937755, 0xB59145C663A23CAB, 0x7278D3A5DE0B6AF2)),
    (b"TNQ@", (0x622DAC929B4FE0A0, 0x93A3D4874A06D11A, 0x4187E7FAE0460E2E)),
    (b"127.0.0.1", (0xC08B1587DF65B7A7, 0x48E37914BFE6FD4C, 0x8487115FE6B4D594)),
    (b"127.0.0.1\x00", (0xF7AFE10FDF087BE3, 0xBC90339E2B0F6706, 0x326DBDA65B2B81FE)),
    (b"127.0.0.2", (0xDA3057A00712C3B3, 0x502796520DFE99B7, 0x1BB672E59E180781)),
    (b"127.0.0.2\x00", (0xCB4C15DBC99F208D, 0xF52E4DDBF33EDA7C, 0xFDAAF67FBBB057C9)),
    (b"127.0.0.3", (0x95499392E61F7580, 0xA2DAEBC0B33A88BD, 0x673E717762476C76)),
    (b"127.0.0.3\x00", (0xC01F9FA6A89A373E, 0xE43326FDCC0F930A, 0xB391B39C12126801)),
    (b"64.81.78.68", (0xC713EC358F4B3891, 0xE0162A5D402241C9, 0xC95B122E43AB73E4)),
    (b"64.81.78.68\x00", (0x49D1D7D4CC2538CE, 0x4BE7212B025F164C, 0x2E2082A3EC63A80A)),
    (b"64.81.78.74", (0x3E6DC31B80A5A450, 0xB3A38AC2256659E0, 0xC5737196DF5D088B)),
    (b"64.81.78.74\x00", (0x12AA7038043C8C83, 0xFE8150FD5CA75EA2, 0x9BF35885A4137121)),
    (b"64.81.78.84", (0xC915802FF0C2EDB2, 0x33A55B8A7B1AB343, 0x10CC40BE25CC791B)),
    (b"64.81.78.84\x00", (0x7FF782570D573B3C, 0x5F202BA87BFC0646, 0xFDB5B12DEC812F3A)),
    (b"feedface", (0x94B5CE750F90998D, 0xBFF73B35D3069096, 0xA8CA53DFFF2AC69F)),
    (b"feedface\x00", (0x10B342529899B0F7, 0xBDD0C7CD4D89A9F0, 0xC42DF8F061AFED1B)),
    (b"feedfacedaffdeed", (0x5A7AFA18DDC6A064, 0x38612467FE905A5A, 0xE76006AB78C6D93D)),
    (
        b"feedfacedaffdeed\x00",
        (0xE10B69A0AE9AA852, 0x78B7693447386C53, 0x59FE3505C06B40A2),
    ),
    (b"feedfacedeadbeef", (0x3701A5ACFF61B7F3, 0x33A1A84FCCC1BB78, 0xDA3C2C457EB92296)),
    (
        b"feedfacedeadbeef\x00",
        (0xE0C002B7688056D, 0x53C030244AB4E622, 0x40DE65A916FBD80C),
    ),
    (
        b"line 1\nline 2\nline 3",
        (0x8D4C7BC7E7349192, 0xE2E85C421E8B58AD, 0x8EF9E41AA14677F9),
    ),
]
XX3_64_TEST_DATA = [
    (b"", (0x2D06800538D394C2, 0x4DC5B0CC826F6703, 0x4C093276AE47A555)),
    (b"a", (0xE6C632B61E964E1F, 0xD2F6D0996F37A720, 0x43A7E49BC8A25756)),
    (b"b", (0x575A0B1C44D8843F, 0x99009138A3452320, 0x610FB86DB790C117)),
    (b"c", (0x8C40219A46B9F81B, 0x14E640BDB537802D, 0xBA19DE7A466C536F)),
    (b"d", (0x45F80274C9C7A7CA, 0x6E6BFC18706E03E7, 0x5172FBE04B6E6DD4)),
    (b"e", (0xE5E72E5E3BEC4A78, 0x6881790369F3A86A, 0xFD35334D36598AFA)),
    (b"f", (0x33C155909FF3BA9A, 0xD8317CC9D468D821, 0x9C1B14AE0A1FFAAA)),
    (b"fo", (0x696D423252065815, 0xB8062EBFB8841260, 0x8CA0D9AC91B11CDA)),
    (b"foo", (0xAB6E5F64077E7D8A, 0x54557A2C8B633298, 0xB15A3019F53EADF9)),
    (b"foob", (0xE034C80F64DE326E, 0xC6C94698A597CCD1, 0x19461FF4E56DC53A)),
    (b"fooba", (0xE6DBF2C6DFBDF696, 0xA16249708B319009, 0x4EE7175BA7CA137E)),
    (b"foobar", (0xD78FDA63144C5C84, 0xB528972401B50E23, 0x2E8E3DA79E8B01DA)),
    (b"\x00", (0xC44BDFF4074EECDB, 0x5EAAC1F7B17EF730, 0x77B2DF5FF42AAB88)),
    (b"a\x00", (0xD78BAAC08237DDB, 0x43ADCFFA779C730, 0xC1A489AF328672B0)),
    (b"b\x00", (0xA44155A82163AEBE, 0x6BE0AB9BC252C703, 0x1A7F8C943D923A23)),
    (b"c\x00", (0x4ED00DCF6D58E981, 0x7B3322BE4F3A61D7, 0x37A6A989126419ED)),
    (b"d\x00", (0x35E5528967697080, 0xB009741A5DCB1FDB, 0xD33479316608BBC4)),
    (b"e\x00", (0x16B44ECDF59A5DC5, 0x2D2A66AFC5096C3D, 0xE788E6B2F7E0983F)),
    (b"f\x00", (0x2350CEAA33E7738A, 0xB1AD93F343659AD9, 0x4D94A48C188E4CB6)),
    (b"fo\x00", (0x8E19DD9B683E18A5, 0x9183DD504D935D69, 0x6CC62A5799727023)),
    (b"foo\x00", (0x192F22EB478F34F4, 0x4FCBE2787AFCFA7, 0xF16EA56AA5C51548)),
    (b"foob\x00", (0x7D107A9186CBFA19, 0x95A0E744FD2C3AA3, 0x211FFCCFB44A2EB9)),
    (b"fooba\x00", (0xA04085418801629, 0x23FD16B3D480B878, 0xBBDF5D7019465937)),
    (b"foobar\x00", (0x42C9FE3205FC4571, 0x77A516A739FE1D61, 0xC2C526E64E84C8AA)),
    (b"ch", (0x3C3B0201FEA9E2EE, 0xC18B40BFE24CC0A8, 0x3CFE434708628529)),
    (b"cho", (0xF6BFDB7001C0E795, 0x796483F471990D49, 0xF854885DFF2E81AD)),
    (b"chon", (0xFB74B6057C0F1BE4, 0x8B2D2EFE6A0D31C7, 0x3091E5DED884A19F)),
    (b"chong", (0x1F8C9C697E03D848, 0xB6D960B30FE450D, 0x2139AB5FD60FD4B9)),
    (b"chongo", (0x4EAC780AA7301036, 0xE8E7D2FF15BFC011, 0x3DFA4BB8D9101BE3)),
    (b"chongo ", (0x1F04AA4CFB65C16C, 0x59E7F2D1EFA77329, 0xBC01EF26F7525802)),
    (b"chongo w", (0x2D64DA5151E705C0, 0x9976531F76F64381, 0xCAD710FBC7C84911)),
    (b"chongo wa", (0x735A9211B14A31C4, 0x66DD47B47342632F, 0xE0EF08515B66BFE2)),
    (b"chongo was", (0x8FCB143B13BC7570, 0xB4E4C84426A331B3, 0x82C288223D998230)),
    (b"chongo was ", (0xB1D2B1DCB84B1AB8, 0x242D5C3315D4DEF9, 0xB1AEA65DBA0E47FD)),
    (b"chongo was h", (0xB971B96DC49201C2, 0xA0A61D7C6F5C1BA4, 0xECE1A8759626BB0F)),
    (b"chongo was he", (0x6C53AEB7DFDFE950, 0xD217308DD502CDEA, 0x8968BCB8B95767F8)),
    (b"chongo was her", (0x38ED4FF48C0A80, 0x37429EC880648025, 0x8ACDC31871843398)),
    (b"chongo was here", (0x203C27F0C59EF2B6, 0x603131813E8E8C50, 0xE396EF58251E0A25)),
    (b"chongo was here!", (0xCFB35945B5996461, 0x8244E966B003C141, 0x46CDF4C519BC4C07)),
    (
        b"chongo was here!\n",
        (0x16E0B9164783EA6C, 0x35F85FD0F060A1E7, 0x4D01E184732DF045),
    ),
    (b"ch\x00", (0xD85094D073C0259E, 0x7DA64FA622A005D6, 0x98BC00B71AEAF5F8)),
    (b"cho\x00", (0x981C0E60C33923B7, 0xD7192BE851896A45, 0x3CA7C796F603AFAD)),
    (b"chon\x00", (0xE1255C50A4E7C4D, 0x98DBFE2376D9E5B5, 0xE6094F53419C789C)),
    (b"chong\x00", (0x9A20CF60E343F260, 0x4C39C11F6EA6FD74, 0xBBD6F972F8351A84)),
    (b"chongo\x00", (0xA6002994504B8B52, 0x8503F1CB89C8B7B8, 0xC087A97D75CF7DC0)),
    (b"chongo \x00", (0x75A8D41513B71127, 0x45B17AFE5DE609AC, 0xB57285163199FDE5)),
    (b"chongo w\x00", (0xFEF0A9E3FFA1EBE4, 0xE4633342D3F681D7, 0x3E1561A51DE18A78)),
    (b"chongo wa\x00", (0x2DFD8E507534EC1F, 0x64DB06D71498B68D, 0xFA27E5967FB504EF)),
    (b"chongo was\x00", (0x842796EA832A141E, 0xB4C9F16098B68401, 0x18EF6889170EC308)),
    (b"chongo was \x00", (0x1F389BD6914C8330, 0x6A05846F48A4915B, 0x89060736BD382781)),
    (b"chongo was h\x00", (0x51EA8BFE0C2C633B, 0x4EC1703A8444A752, 0xB7FE4C4D7ACC755D)),
    (
        b"chongo was he\x00",
        (0x8B5B4D7ED8D7F824, 0x4555F15237FDBD56, 0x9280E3ED02541614),
    ),
    (
        b"chongo was her\x00",
        (0xDB0DC17DDE2BE141, 0xE783F206221C9781, 0x9321D2405832CA24),
    ),
    (
        b"chongo was here\x00",
        (0xB422231F5F71A5C9, 0x15299EA741C1E2EE, 0x3CA0917B1609F247),
    ),
    (
        b"chongo was here!\x00",
        (0xD5BF9AE1E57B50EC, 0x3716BE8002808793, 0x887580649C87EB9A),
    ),
    (
        b"chongo was here!\n\x00",
        (0x896314B1BE0D3730, 0xFAAD98AE2BEC0B1F, 0xB2B0B9963BA66C1E),
    ),
    (b"cu", (0x3AE17AE3EFF62D02, 0x5C3B0DAD440EEF77, 0x9DD910F7A291B6AA)),
    (b"cur", (0x92B2B79DAD777111, 0x52B2F122F31B9FB1, 0x3EFE09CB11EBA76)),
    (b"curd", (0xD76EFEDC38C26AD8, 0x5EA2330BF560868F, 0x55DC3FB2BD8DD356)),
    (b"curds", (0x565E98F31762D4F6, 0xE0CB6CD93377AE1F, 0x657D5C1FDAC7DE09)),
    (b"curds ", (0x6EE4E651284D89E6, 0x49E83E6CF1CBAD46, 0xCA00F951E689F532)),
    (b"curds a", (0x667F82A4768268C4, 0xB101EF4336184502, 0xB1CFFB59EE68FC6F)),
    (b"curds an", (0x7BB04DC068F4627A, 0xF2CABDECC04A995E, 0xA57557F8BD839898)),
    (b"curds and", (0xF424A63C7B617897, 0x90CCD302E3E4694D, 0xD30F3F14B9E7A715)),
    (b"curds and ", (0xE0C5C7EE567C99DF, 0x2BA95AEA635E71CF, 0x7359F41BF5403DFA)),
    (b"curds and w", (0xD6E080E1AAEFE32B, 0xDDA5F6DC3AFB0706, 0x6314C4AB8F1D6FC3)),
    (b"curds and wh", (0x8C4BE06520FEE011, 0x3CCA77D4AEB49424, 0x67135F36E05A4012)),
    (b"curds and whe", (0xAE6A78FC37D04A4E, 0xDA858092257A9F21, 0x5CD6B552D6EEF0DA)),
    (b"curds and whey", (0xA0F3E1B5D011565E, 0x8B44C943BFCB6338, 0x517571686BC8F87D)),
    (b"curds and whey\n", (0xBE79DFCED6F10E85, 0xEE8CCE72F8E15FD0, 0xDFBE09AAA00A34CA)),
    (b"cu\x00", (0x22685107158174B0, 0xE694CD8A6AD1F605, 0x761DEFB7A67B3568)),
    (b"cur\x00", (0x1EF46B823243145F, 0xD0D06EA4DC4337F0, 0x5F9555F73396BE78)),
    (b"curd\x00", (0x284CDA4E7943B540, 0xF425F90C5F5A69BF, 0xFC9873E53FA334CB)),
    (b"curds\x00", (0x6DB0E8041F3E6641, 0x127E0D0365CA78A9, 0x231CADBDAE8F9CC7)),
    (b"curds \x00", (0xBCF7B46C78676148, 0x4F67A9015DAB8280, 0x501FDDFA27984EA7)),
    (b"curds a\x00", (0x7D18F50DAC985B90, 0x110A9CE4198D9650, 0x7EDF20CA48A0A51B)),
    (b"curds an\x00", (0x4D6F668C4A8D31FE, 0x6DAA8E107DDE0BF6, 0xF9DC73D963730F87)),
    (b"curds and\x00", (0x82D18DCF64564AB5, 0xFA3D0508A49FF0B9, 0xB2D7F57E967B2550)),
    (b"curds and \x00", (0x46C6673D667F77E2, 0x61A7B586A5B92134, 0x1EBF86756A41F988)),
    (b"curds and w\x00", (0xA683562977CF0DA4, 0x68247D95BA25D525, 0x24717309606FC6F7)),
    (b"curds and wh\x00", (0x625207A3C37E5856, 0x968D1B68281C11F0, 0x55B96409E95D9C02)),
    (b"curds and whe\x00", (0x6510AD9354F51553, 0x6DA78CEFE750AC22, 0x4E7A4E667E9756B)),
    (
        b"curds and whey\x00",
        (0xC5ED2349010A9B54, 0x8A49C2970FEE6032, 0xF43E2C5FA4DD38EA),
    ),
    (
        b"curds and whey\n\x00",
        (0x1CE41F4775ECC5EC, 0xCAE3EB1DB6336BB3, 0x344806E490A3EC22),
    ),
    (b"hi", (0x2A2300BBD7EA6E9A, 0x831DD3C11D8A2B90, 0x39800D4FF32094AA)),
    (b"hi\x00", (0x453DCAD6CAF28D9, 0x56A7E465BE0E437B, 0xD64D1D7BF7D24B9)),
    (b"hello", (0x9555E8555C62DCFD, 0x74B07ED397A89E92, 0x241E5D5372565724)),
    (b"hello\x00", (0xC5AB198C53EB7646, 0x3DBD18E1539277B7, 0xB8DAA345C4A2BBC2)),
    (b"\xff\x00\x00\x01", (0x64C5DE8AFCCBC45B, 0xBF2DBA0183F9E63A, 0x8EB57A872BEAB06E)),
    (b"\x01\x00\x00\xff", (0xF588AB92DAC187AE, 0x62B7387ABCB0B83E, 0x7551FC434A157D23)),
    (b"\xff\x00\x00\x02", (0x4EF45403CACF602D, 0xEEDB6121C525BC15, 0xD4BA6B6F8585BA4)),
    (b"\x02\x00\x00\xff", (0x212919C195260F4A, 0x5ACE20C0E02E51CC, 0xBD70FC11B7F85446)),
    (b"\xff\x00\x00\x03", (0xA449F01DA961F1AB, 0xC16315059D1AC01, 0xFB43830D4C731F56)),
    (b"\x03\x00\x00\xff", (0x4E3BD19B5143C383, 0xF434CD22ABC3CC11, 0x4998138AA96A1EB9)),
    (b"\xff\x00\x00\x04", (0x2AF5CD1BC6CA9A5F, 0x80727ACE7CF67D39, 0x6BCC2E1FF60CD13A)),
    (b"\x04\x00\x00\xff", (0x2A2D9D2F2642152F, 0x2138F857F8EFA490, 0x16CAF144318FEA9A)),
    (b"@QND", (0x5B3E1C9B8F854780, 0x8CEFBB4CCBDD6812, 0x4B21FD185C2A663)),
    (b"DNQ@", (0xA9909D5EE68ABD03, 0x427E30B968DFB7EF, 0x4EBDA9F5E85F1108)),
    (b"@QNJ", (0x9A365A05AB18C239, 0x84856F764B7864C7, 0xBB950745D124547F)),
    (b"JNQ@", (0x60372553773B40AE, 0x98B087C6C64B9CCB, 0x76A7E029EC3D0253)),
    (b"@QNT", (0x9215F5CA05041AEF, 0x9D31850329DD72CF, 0x505D16ED138C0A4)),
    (b"TNQ@", (0x623CD7E3BB44CD24, 0xE4AA922D814654AE, 0x32E81080ACF31572)),
    (b"127.0.0.1", (0x9A071D171774168C, 0x6D2D8FA2DF24F5AC, 0xD27E1A38D6BC6448)),
    (b"127.0.0.1\x00", (0x31FC5C6A38C3D507, 0x6C7817ED89CA1B17, 0x9D6E60C0271BEA6B)),
    (b"127.0.0.2", (0xE60C80E6B5EDD112, 0xC301F13E317E073, 0xE8FD3B1B832E62A1)),
    (b"127.0.0.2\x00", (0x2262D112AE2AB1CF, 0x824A3F8CCE87816B, 0x86A95B46D34089C9)),
    (b"127.0.0.3", (0x96DC86343069CCC2, 0x732FEF6DB3A4FAE8, 0xEFDA680CADD3C6A7)),
    (b"127.0.0.3\x00", (0x1C891D48BF0292CB, 0xCB43F9C2CF91898D, 0x57D3575D46028F0B)),
    (b"64.81.78.68", (0xFB78FB4DDEF2E69A, 0x90AAE4D78D834200, 0xA6EAE0519EF9A3FF)),
    (b"64.81.78.68\x00", (0xCDE79DA2E087B43B, 0x1F350134E946A5CA, 0xA673699D9FB13861)),
    (b"64.81.78.74", (0x93CCF563CAA4B277, 0xC7AEAB5BF7F7F7EC, 0xC7343644A95F9D71)),
    (b"64.81.78.74\x00", (0x50CD907F7733FC45, 0x6CF4F091254DB4DB, 0xED3187780A6A6920)),
    (b"64.81.78.84", (0x195B95A1B2AF0874, 0x81FBE926B6273C3, 0xC4FF94F238902AAC)),
    (b"64.81.78.84\x00", (0xAA4FDFDA2085929D, 0xD86D37BFF33601E6, 0x64B66D56B9637BED)),
    (b"feedface", (0xEDF978081D2BFD26, 0x85C2B9DE12AD51BC, 0xF315DD9DC7208984)),
    (b"feedface\x00", (0xF045662086B9F02C, 0x7948C5853B3B2852, 0xE465F2577C86B80B)),
    (b"feedfacedaffdeed", (0x89D1259B72D3D007, 0xC8339C2AB46DB802, 0x3911931F71DD8CF5)),
    (
        b"feedfacedaffdeed\x00",
        (0x9A4DE90AE84A39AB, 0xE6EF8CCB4C40C35E, 0xAC5976FB804F311),
    ),
    (b"feedfacedeadbeef", (0x1A253CC7EC1954C5, 0xFD4808B6FC3CDC04, 0x52E783C9BBCCB998)),
    (
        b"feedfacedeadbeef\x00",
        (0xC4FBFF5E19DD1E4B, 0x7E75AEBF7BDC0880, 0xB4B9AD0F44A316E6),
    ),
    (
        b"line 1\nline 2\nline 3",
        (0xE634BC5C50114323, 0xBE2073229D0AE92D, 0xC3CC2FC846EC8441),
    ),
]
XX128_TEST_DATA = [
    (
        b"",
        (
            0x99AA06D3014798D86001C324468D497F,
            0xD9265CC53BB2B9AE6131B78F753823CD,
            0x5334EC22748B5FCD2D10110A247D19DD,
        ),
    ),
    (
        b"a",
        (
            0xA96FAF705AF16834E6C632B61E964E1F,
            0xFDD9B77FDCAF3221D2F6D0996F37A720,
            0x952EC4387F5E4D9F43A7E49BC8A25756,
        ),
    ),
    (
        b"b",
        (
            0x4B2212E31AC97FD4575A0B1C44D8843F,
            0xB80B719226156E2D99009138A3452320,
            0x54FF92A8C0DA8167610FB86DB790C117,
        ),
    ),
    (
        b"c",
        (
            0x12D8BDD17F74DE858C40219A46B9F81B,
            0x48A6201B44054DD514E640BDB537802D,
            0x1097306BDEFF837CBA19DE7A466C536F,
        ),
    ),
    (
        b"d",
        (
            0x56A841F9102D5FF745F80274C9C7A7CA,
            0xCE5E3AAD95BC17296E6BFC18706E03E7,
            0xC88B22C23DFA126B5172FBE04B6E6DD4,
        ),
    ),
    (
        b"e",
        (
            0x2D97A8F9E2EDAAEFE5E72E5E3BEC4A78,
            0xED4CBE03E48F918F6881790369F3A86A,
            0x96FE58B61DA8733FD35334D36598AFA,
        ),
    ),
    (
        b"f",
        (
            0xB3B2B50BF19AD7D533C155909FF3BA9A,
            0x85153EB0A9A64604D8317CC9D468D821,
            0x426A4D80F7E51C999C1B14AE0A1FFAAA,
        ),
    ),
    (
        b"fo",
        (
            0xC680BF24E2776BD0696D423252065815,
            0x5F0B4BE8CFF69DC6B8062EBFB8841260,
            0x583694997E35662E8CA0D9AC91B11CDA,
        ),
    ),
    (
        b"foo",
        (
            0x79AEF92E83454121AB6E5F64077E7D8A,
            0x1F7D80A3C77845D454557A2C8B633298,
            0x399131A97EB2A611B15A3019F53EADF9,
        ),
    ),
    (
        b"foob",
        (
            0xC1971726CB67EDA3B392B22D2E6BCFB,
            0xA72EF89D4214E8F7F8B47A652C29AA2E,
            0xDEFC31B326175839DF5ED3C846D52F66,
        ),
    ),
    (
        b"fooba",
        (
            0x721ED857495886190CC6515FD60C6FA2,
            0x87FD707073B0B103175EEB212461ADCD,
            0x1F7315E7BBF4AEADBEC94C9FA03D2C16,
        ),
    ),
    (
        b"foobar",
        (
            0x3C9E102628997F44AC87B0B131C6992D,
            0x51DFCA1913DC273920BE93E6DE5DEF71,
            0xF9D01092E06C47E9FAB1D6570ED5BBB8,
        ),
    ),
    (
        b"\x00",
        (
            0xA6CD5E9392000F6AC44BDFF4074EECDB,
            0x3B3052D680068AD35EAAC1F7B17EF730,
            0x4084B473DCC29B5977B2DF5FF42AAB88,
        ),
    ),
    (
        b"a\x00",
        (
            0xFE6C33C14011B5780D78BAAC08237DDB,
            0x410AEA9F9A2B06DA043ADCFFA779C730,
            0x2378CEF7E4EC8A86C1A489AF328672B0,
        ),
    ),
    (
        b"b\x00",
        (
            0xA232AF2EBE02C6C5A44155A82163AEBE,
            0x85E06A57A41DE44D6BE0AB9BC252C703,
            0x9173B03E7C36951D1A7F8C943D923A23,
        ),
    ),
    (
        b"c\x00",
        (
            0x1821B2C03CA034E74ED00DCF6D58E981,
            0x24509F779B2754387B3322BE4F3A61D7,
            0x7F24292171F23C7137A6A989126419ED,
        ),
    ),
    (
        b"d\x00",
        (
            0x3BC1968663F0371735E5528967697080,
            0x33409CEA7580EBF7B009741A5DCB1FDB,
            0x4F3D8BBE20EE8FBCD33479316608BBC4,
        ),
    ),
    (
        b"e\x00",
        (
            0xE8A055835344501716B44ECDF59A5DC5,
            0x199641E06ED8D36E2D2A66AFC5096C3D,
            0x6A8FCE64EC52677AE788E6B2F7E0983F,
        ),
    ),
    (
        b"f\x00",
        (
            0x31F36CA3F0B344652350CEAA33E7738A,
            0x900240E0D119E7BCB1AD93F343659AD9,
            0xD5F74AA033E782A84D94A48C188E4CB6,
        ),
    ),
    (
        b"fo\x00",
        (
            0x16CDD12D7F57A83C8E19DD9B683E18A5,
            0x96F73977586F6FD39183DD504D935D69,
            0xDC17679FEFB8A7166CC62A5799727023,
        ),
    ),
    (
        b"foo\x00",
        (
            0x5A6DA05EAF268B180FE21FB69FB1DCC0,
            0x7FAAE45714DE7B3A9A4FF3E75038BF0D,
            0xA3F7341F1B94784A45FBCFCF4E34372B,
        ),
    ),
    (
        b"foob\x00",
        (
            0xC95A05E8EFA9B9D7C259AB2A037487A1,
            0xADE768C7B83F7C605EFB146B3F8E734B,
            0x7D6980739541A3B36251C1A6D0A8A117,
        ),
    ),
    (
        b"fooba\x00",
        (
            0x146DFA5466EAE8BF2176502A7B96BE20,
            0x7762BBEE76659D55E871AF747186FEE2,
            0x138A4A7B90D8E41B2813CC7F3D77D470,
        ),
    ),
    (
        b"foobar\x00",
        (
            0x8B30B45581F0373E367D97F6FE0A0BED,
            0x85FB67AE9A4B545D4334E1715C85352C,
            0x10471F84B3114DCCA5EFE6319103580F,
        ),
    ),
    (
        b"ch",
        (
            0x228DCBF612535BC33C3B0201FEA9E2EE,
            0xCD1AE5A239F60D73C18B40BFE24CC0A8,
            0xB9BA8D5FF66048723CFE434708628529,
        ),
    ),
    (
        b"cho",
        (
            0x819C85BEF8455DDAF6BFDB7001C0E795,
            0x51267FF66B06C1796483F471990D49,
            0x9F10781C673C5D52F854885DFF2E81AD,
        ),
    ),
    (
        b"chon",
        (
            0xAC53DD359D987B46891D8A760094FF1B,
            0xA3B87B05A90A160A69293F52C76718CE,
            0x24233110B5CD217CD83AF6A39B132FE1,
        ),
    ),
    (
        b"chong",
        (
            0xFC5694A2608ECB22F08E45379E285C9F,
            0xAEE90CDEF4D43D54BD195CC081FE7BC6,
            0xE67F87E00412DD13DE566BBCF32D17BA,
        ),
    ),
    (
        b"chongo",
        (
            0x2D3E20FB2272B736DBA2B873E4078F7D,
            0x73BE9BE674983F9BEAB6E91F9B619193,
            0xEBFAD305372FAF273F65B7E0D57D63A9,
        ),
    ),
    (
        b"chongo ",
        (
            0x72E4574D31EFB1645D98BBCA08C01665,
            0x39A64588595B520D008246B85AE0F7EF,
            0x6E4B57D9070D13CF2EE4689982928878,
        ),
    ),
    (
        b"chongo w",
        (
            0x96DE1F9BBDC25FCB5D310DD3B7719C96,
            0x7042E3F8DD65A91EF38C7F224028387B,
            0xBF557BF6244CA83680A7509D6784BE3E,
        ),
    ),
    (
        b"chongo wa",
        (
            0x8BE07D131E4150907A41CAC8BBBC002,
            0xA5B4A673E2994ED5F25313F5951D7F36,
            0x7C6A4488A172B3A5DEAA4CD7E05AB46E,
        ),
    ),
    (
        b"chongo was",
        (
            0x243891E67FEB15DE6BF1E562C5FEF16E,
            0x1D7EF0C990EF5040F234B352DC50294,
            0x29806E806E35CB6BAF1E0763B045C5F4,
        ),
    ),
    (
        b"chongo was ",
        (
            0x8889FA2EDDBA50D6B7D498A95522EFC4,
            0xC4CC784DF771D5465818AE726AA8C461,
            0x9F6167D3B1471FD82AC2E6B51235B920,
        ),
    ),
    (
        b"chongo was h",
        (
            0xBCEB62045756D3F2FF946E26EAAB66AF,
            0x3221873B9C39E4FB06158184B0DEFD42,
            0xA06BB24993D18FA16665A6BFC3039F75,
        ),
    ),
    (
        b"chongo was he",
        (
            0x621B9FE36984342FCA815D91D2735AAB,
            0x24DB6F17FBC50171C0988D32131289BC,
            0xB955B0F46BA9773506BEF88F7E652FA0,
        ),
    ),
    (
        b"chongo was her",
        (
            0x9C1EFC854D19A2B0C73E179419A40F3,
            0xB6D0B35E8D126D1B07053EEC4553A1A2,
            0xB6ED37F8C31FC99075B1482A2F022F0C,
        ),
    ),
    (
        b"chongo was here",
        (
            0x81A2D58E63F7701CD882E969E4425C0D,
            0x25BAC1ACEF65BBA59CB192FF7EF3DA78,
            0x65D4BECBC112A287C54DB388CF31CBD1,
        ),
    ),
    (
        b"chongo was here!",
        (
            0x8802C7B0F2499ED4270DE53993212C10,
            0x5EA1D54F2D80009C5D48A08809249D7B,
            0xE734077E5DB33F7F64ABE11059B32028,
        ),
    ),
    (
        b"chongo was here!\n",
        (
            0x4CA3F48A872436FCD552B7E3BFE78F8A,
            0xF3CF61E746575B557848FE5CB75A8057,
            0xC36479942700C20A788465144C6F39B1,
        ),
    ),
    (
        b"ch\x00",
        (
            0x123B15B897669916D85094D073C0259E,
            0xCF122C5D7E4BE37DA64FA622A005D6,
            0x9E78A469BC8810B998BC00B71AEAF5F8,
        ),
    ),
    (
        b"cho\x00",
        (
            0xBAF01C05CAEBD7A6F3B2CA241EB44217,
            0xD4F019D7BD9456739BBF61C4987BC748,
            0xD108A6790A6692E8872AE31218957818,
        ),
    ),
    (
        b"chon\x00",
        (
            0xD912245FE7BE1BBFFE43D402BECC2F,
            0xF0DA34E4EF7AA2B89997DB050753176D,
            0x4D35F491F45B5241373010B0CC414712,
        ),
    ),
    (
        b"chong\x00",
        (
            0x3307CE1E4F64389E60ABF4BC5092007B,
            0x6447701A1784F645ED636CB568B2285F,
            0x43DEF32542FE412505F84132D340C49F,
        ),
    ),
    (
        b"chongo\x00",
        (
            0xF905577AC80BACD9FACA5E5918788C1A,
            0x60F457207F505378602D64AF48726BBB,
            0x3618CB069A5D907227CBC0FC214031AE,
        ),
    ),
    (
        b"chongo \x00",
        (
            0x15B57CB7E2724523D4A90AB1DD2D33D6,
            0x4FF0E5F8497D10202E2F5A826FA1017B,
            0x1DBF537A0A775EDE27FFB706E58FAF58,
        ),
    ),
    (
        b"chongo w\x00",
        (
            0x6D2368A66711404FC35EF48F0881004,
            0xEF24AC784671ED65D173D756565C291D,
            0x16597FD809D13A01AF5FC215EEA07ED4,
        ),
    ),
    (
        b"chongo wa\x00",
        (
            0xF922980F10C672243DB42CAAEBC3BD99,
            0x8597DF016EB96381C5FADE697933A8AC,
            0xD05A3F839EA80905678B8C11B2FFDD7F,
        ),
    ),
    (
        b"chongo was\x00",
        (
            0xB8F88012B34132EF64377795F3CF7F31,
            0xEBD5251B5F28CD7453506CD5E198AEFD,
            0x311EFC275E9B6035737143D62A95506C,
        ),
    ),
    (
        b"chongo was \x00",
        (
            0x684175548AB0C54439472F535E64ECED,
            0x18C6A8F6B6FBF46C3695B84028C7BEF6,
            0xC15626D549C23FF5A05BD9125F26334B,
        ),
    ),
    (
        b"chongo was h\x00",
        (
            0x79EC7EB1D80EB1AEFBCCBC39DB16A55D,
            0x78AA8B7B415A6592394DA15240B9C303,
            0x6C3DFD9AFBF6A96ECAE512BF8A0435D8,
        ),
    ),
    (
        b"chongo was he\x00",
        (
            0x97EC5FE41C679C94C831AEFB08695868,
            0x3F977D0EFE7CB9D8B422E4DBC55FE399,
            0x7183991F146E247EF3BED3C84243D2D8,
        ),
    ),
    (
        b"chongo was her\x00",
        (
            0x7AC410A7ADCA9A14507FC226EDF4F481,
            0x1094609BD5C638DC4728A98F375D3B3E,
            0x367531D37FDDEEF616596911B06EE74F,
        ),
    ),
    (
        b"chongo was here\x00",
        (
            0x1AFD8871ECD11001263B610F40D881A3,
            0x83DEED7C47DDF2C2F7312055571B958C,
            0xE6F029FDF7DAB9F642141A416BD9EC4B,
        ),
    ),
    (
        b"chongo was here!\x00",
        (
            0xCFDE0DCCE033E63432FCFB47E515BAA8,
            0xE1C0E96078D55178D8C564F303F40754,
            0xE3AC1CC181EA10A02539D24C22E77A2C,
        ),
    ),
    (
        b"chongo was here!\n\x00",
        (
            0xD909419DB7A98E7C04E6C377CB5ABECA,
            0x3117C44F59FC8AF655C484BB82FAB63A,
            0x1BE589678CEFCC4736067A8A3A419905,
        ),
    ),
    (
        b"cu",
        (
            0x9AFB2F798ED03BD93AE17AE3EFF62D02,
            0x3720C7E1AC9C515B5C3B0DAD440EEF77,
            0xD1802AEAB5BBA9699DD910F7A291B6AA,
        ),
    ),
    (
        b"cur",
        (
            0x1B6005480C2A4F7092B2B79DAD777111,
            0x48E10A65175AA97752B2F122F31B9FB1,
            0xDAB7A90A9C87961103EFE09CB11EBA76,
        ),
    ),
    (
        b"curd",
        (
            0x80C5E4D1EEB6B861E17602E242174175,
            0xEC9B12FCB84C72F9E2F18B9B54A4221D,
            0xC7CA29619BF98441875E463409F45EAD,
        ),
    ),
    (
        b"curds",
        (
            0x7D6E9DA463E5D196FCC2E5EB124608AC,
            0xA938D3DC335F8427B81565DCDE92662A,
            0x478C51419DED56F2DB132C402DD8CE1C,
        ),
    ),
    (
        b"curds ",
        (
            0x57B4150E043064325C62C297232258E4,
            0x510C143864464A0850A138BB875583EA,
            0x2C81DEBF5A414B7207AA3000214012CB,
        ),
    ),
    (
        b"curds a",
        (
            0x3BFCF3010711E5C12B59C7E64D406090,
            0xAE9E1E0BB8EA9456C2858D6D63442A24,
            0x9070DE26A1A50547DB9BA038443A80F9,
        ),
    ),
    (
        b"curds an",
        (
            0xD3A6E596A46EB4E29597871C8D0BB66D,
            0xD7872DA6C73DCBCE4B670773530EDE94,
            0x10A6F17685193972370038BA1246DE2E,
        ),
    ),
    (
        b"curds and",
        (
            0x108A78D9ABFD3FABB4EF0DA19A81F540,
            0x7EDCED6949D94B395FC7F4E50097FA04,
            0x5B7D7F0B245C49D0329D94FF30903830,
        ),
    ),
    (
        b"curds and ",
        (
            0xADA698145312BBE3C912D6B5EFDD2053,
            0x7429E1C88CF5734B2DF8D50D32736F0E,
            0x735100AD2D9607196F94A4B90F7B20E7,
        ),
    ),
    (
        b"curds and w",
        (
            0x2C44A3E2F632EE604C3D1401496D1480,
            0xAAEDE16E16701BD3E61C35B0F0D27917,
            0x1F6145D48ED9ED4FEF8456DE0D106385,
        ),
    ),
    (
        b"curds and wh",
        (
            0x550F4CC15C183BF3E33876065F738B81,
            0x8622FA11F82B1FFCBF29AA744F5F3286,
            0xA5C959CA45C50733FB2E0C3009D5AE28,
        ),
    ),
    (
        b"curds and whe",
        (
            0x75621F394BB0646B13633260E15625B,
            0x4AA4E4781E25A0803AD1DC18BBF27804,
            0x8E39825D2BD8A5322126788CB7BF4975,
        ),
    ),
    (
        b"curds and whey",
        (
            0x1061557B4E713D42E5ADFEB7598FE176,
            0x8F92F1E312F75A8B32736AFDEA0B6241,
            0x5A8CF3B37F54AA26BC816381055D5F11,
        ),
    ),
    (
        b"curds and whey\n",
        (
            0x82EF023774E0547B1A6AE38FCB477AEA,
            0xD110BE91E068918C1ED777D039ECC995,
            0xE41E0B1D69785A734EA0BDBE1CC2D9A8,
        ),
    ),
    (
        b"cu\x00",
        (
            0xE28D476FE14615222685107158174B0,
            0xF57626E7E0D655FEE694CD8A6AD1F605,
            0xDA4CCCA7726C1B69761DEFB7A67B3568,
        ),
    ),
    (
        b"cur\x00",
        (
            0x29CD07DAEFD8A6B037131877DE6C0B99,
            0xD26385EDE9FC213FCBBD3CB4AB0BFDE,
            0xC560193284662FA3E445CC3C77CF5E4D,
        ),
    ),
    (
        b"curd\x00",
        (
            0x65B59E7D460F03337D32A44D4468BF02,
            0xD4490810DE29A24B95F82BE2513C5C8B,
            0x520714115CC5B675998101F17B47787,
        ),
    ),
    (
        b"curds\x00",
        (
            0xE5C45F06D2AEDC98910761DED2CDE0B4,
            0xEA1A1AFA7C1DADEFCD96FEE8F3F6F072,
            0x8741095B5601563413091D023B30148B,
        ),
    ),
    (
        b"curds \x00",
        (
            0xDAD57DBD38D7B0D0560733A2FB166C39,
            0x4C5798C6967531B67046686D3BE9D9D5,
            0xE895032DAC17C910233C616E0A3CED75,
        ),
    ),
    (
        b"curds a\x00",
        (
            0x4BAC0CFBA014201115A2E28154B475D,
            0xB5D28DCB13B76681A12029B9F0B1BB66,
            0x2B438316C1B0CB11037F38D111276047,
        ),
    ),
    (
        b"curds an\x00",
        (
            0x7232E6C9F39A414267787DC729F1AD78,
            0x12E896BAB759BA8C69B24BE569122B2C,
            0x8E4FA7AE503D7C0E67F32A1524428EF2,
        ),
    ),
    (
        b"curds and\x00",
        (
            0x76E5AB0579DA4BB48933E254CE8B8543,
            0x9CEB2F0823FFBFC585F180B578737D2B,
            0x105666E17EFBA36E619AD55859005314,
        ),
    ),
    (
        b"curds and \x00",
        (
            0xF38E1BF7E974F8465F46AAA04FD47677,
            0xB1C0BA0399FFC9D4B001A7FD31DF7515,
            0xFD4A7AAA845233AEB54582FEF560F6B,
        ),
    ),
    (
        b"curds and w\x00",
        (
            0xF9CD9A4F6F68C8E6F878C5132C79B293,
            0x2EE27C8DD54586907B793303F49F4845,
            0x520DEB54C941FDF3CAC502E66A6ADDE7,
        ),
    ),
    (
        b"curds and wh\x00",
        (
            0x6EB73852870E7DC37B7D04E877BC0207,
            0xC5DB2A2D2CED441AC1BC55C6B112CC22,
            0x23913F3304BD28C4EA4823FC78084433,
        ),
    ),
    (
        b"curds and whe\x00",
        (
            0x22F714CD5B099F25D8EA045A6E8BC88C,
            0x4519DE27D35796370EACE4775E0E42F4,
            0xC795017715901911858BE79F43A9B8A7,
        ),
    ),
    (
        b"curds and whey\x00",
        (
            0x4D1F0DBC5D23BD35E79E28EDC3B5F6F5,
            0xE9F44EAF6AC856841EBA4D1C4843BBF4,
            0xBBF85BEF3EFA2EC0FF941D306C4DDDCC,
        ),
    ),
    (
        b"curds and whey\n\x00",
        (
            0xF87721E1C4E8D5E6813D15F2CD499B9,
            0xFFE9546EC2F381B9C3882ACCCFAA2519,
            0xB13B1A976DB1CF5DB25D8166505758CD,
        ),
    ),
    (
        b"hi",
        (
            0x7D596CE5FCABAF622A2300BBD7EA6E9A,
            0x6720F183BC2572EC831DD3C11D8A2B90,
            0xF0CD458634BBEA7939800D4FF32094AA,
        ),
    ),
    (
        b"hi\x00",
        (
            0x6E9C299D62CC1E90453DCAD6CAF28D9,
            0x1C9CCE1043F890B56A7E465BE0E437B,
            0x2FFF48004452D37A0D64D1D7BF7D24B9,
        ),
    ),
    (
        b"hello",
        (
            0xB5E9C1AD071B3E7FC779CFAA5E523818,
            0x2158E4CE83D1E1E0DE5ED0A4C781F906,
            0xF7209D113313B8877E4D66691B80364D,
        ),
    ),
    (
        b"hello\x00",
        (
            0x544C90263A7C5C14BFC8213BA0C10F6A,
            0x3D45EC177A6471631EA46BE729A99DF3,
            0xFDB07A02B707407FCE0C8F3BE9496ADE,
        ),
    ),
    (
        b"\xff\x00\x00\x01",
        (
            0xDB976A85626DB43601889280DAC8C98C,
            0x40EBD65F89C9D48302CA346A5BE0A775,
            0x71FBE1F4C0EB33E179DB244C685C8A3E,
        ),
    ),
    (
        b"\x01\x00\x00\xff",
        (
            0xBCCFBA0D58BF21665C2A5B81A36FE7BB,
            0x4BFF3FC83168ED03078CF56945EFB6CE,
            0x95D5ED4D11C0170D822EB61DF7E4C4F9,
        ),
    ),
    (
        b"\xff\x00\x00\x02",
        (
            0x7C5403BC897515A70A596089A6C16E79,
            0x6BD79CD6CF40186E240EA36AB4AC97A0,
            0xE496F8AC84BA562395CC96138BD6919,
        ),
    ),
    (
        b"\x02\x00\x00\xff",
        (
            0x3B60EFBB747A9A8D8BB7235F4BD43A84,
            0x7C69BB7387A96AF843947EB079ADEC1A,
            0x8D3793C77CFD34B416D88DD94AF3A86C,
        ),
    ),
    (
        b"\xff\x00\x00\x03",
        (
            0xB1824F1B92E256C94EAEE3E1FCBCEE6F,
            0xB31911005AC3D25CF82B1E62F4AE8B9A,
            0x73EAB29FE3A60D35CB1042356A66F6FE,
        ),
    ),
    (
        b"\x03\x00\x00\xff",
        (
            0x227FE4B2A79CF8480F923C8AD6DAF08B,
            0x6C84AE31CFB11460B4AAC67628209492,
            0xAAD40577E44FDC49B96F9564FD9CD6A0,
        ),
    ),
    (
        b"\xff\x00\x00\x04",
        (
            0xD27DA487E56E869930DFF728ACD81897,
            0xAE240CB7F6F43A45CFC2F889619AA0AC,
            0x29F2511E8B655650376D1BF5538788B3,
        ),
    ),
    (
        b"\x04\x00\x00\xff",
        (
            0xEA0B481133215059C80C0BB2F1F952C7,
            0xBA53FC025E9BC195669601B6A5BC7F7C,
            0x6BC1B49FD09BEEACA3D5425505A89B42,
        ),
    ),
    (
        b"@QND",
        (
            0xC5CE283FF62475CA8CAEDE5946217664,
            0x49D627C93F4D322CE6E33465DCC180B9,
            0x441ADE1006CABF78DB61D35EFEB033E4,
        ),
    ),
    (
        b"DNQ@",
        (
            0x15706DD7355BDF2B9C993E50BDBCC87,
            0xFC5E9E0A142BE5854D47EAEEC8F91FEE,
            0x3E2E6A43A7C439EE786BEB7C9B5DBDD8,
        ),
    ),
    (
        b"@QNJ",
        (
            0x329637ADF3DB6AE52B46C1538FCDF23E,
            0xF1BA4CD0886F46FEABDA7CB1788EEDBB,
            0x122DB854B9DEAC73425F1212BFE0995D,
        ),
    ),
    (
        b"JNQ@",
        (
            0x79A108674AE668529518BC80140D8B08,
            0x178994938D12B4D222DE2E12E47552C1,
            0xE0745F259C6CCF5AE5B5873B6D1D126A,
        ),
    ),
    (
        b"@QNT",
        (
            0xFFA91838877707D8DEBEBC54D7D567FC,
            0x7CF561A5DF227F70FB04F720BEF789F3,
            0xEDE722C6F1D68C5A2514D38D94D0AD4A,
        ),
    ),
    (
        b"TNQ@",
        (
            0xACC93A802E8ADB4229FAC3E15425BB3E,
            0x381245D829566A748B5D4CFF7D67787A,
            0x49998D5E01A97E8BB0D79C9B04750998,
        ),
    ),
    (
        b"127.0.0.1",
        (
            0x84D0F844475BEF3FE68450CE925D2578,
            0xB1F2A38AF3BEF637EA3B1A8ED82C84B4,
            0x676CF067E6E19C35CF81A55DF01AB293,
        ),
    ),
    (
        b"127.0.0.1\x00",
        (
            0x73ADACA175A270B481501DB41F6DD31C,
            0x51086C8ACEED46245A961F7914D93E51,
            0xAC8C1069251FA9AA6F856216B399DFF3,
        ),
    ),
    (
        b"127.0.0.2",
        (
            0x98D4583131283AD9C7A92F021C9E462E,
            0xAECAC78B7EA6287A3896D410C8D2A8F3,
            0xE54434E5EEC620619F87788EA68FB966,
        ),
    ),
    (
        b"127.0.0.2\x00",
        (
            0x78EED682F0F4E64FE3A85B8C4A270D57,
            0x4029100A4CCD3225FF83965F2D06E817,
            0x4142C538149462373EF8A6F84B04C195,
        ),
    ),
    (
        b"127.0.0.3",
        (
            0xA27193AC6F354EB803828200BA3E9EF6,
            0x738CD2B9246616FB1ECD69B19CD693D0,
            0x7AB440C2AF36D4EEA3900111976508B0,
        ),
    ),
    (
        b"127.0.0.3\x00",
        (
            0x2BCCC72CA0059B946310C6A1EE49E0F6,
            0x91EB4C1184119F48438B0D53DFA67078,
            0x2025E9E6F4C34BB230E7E88DB3A43D16,
        ),
    ),
    (
        b"64.81.78.68",
        (
            0x9F8D2EF7F98BEFBDB1E61D1E352F1082,
            0xB6C1ACD1EA12F2765875D7103501BEE1,
            0xA23F49280417EC362AE4574C6F38B340,
        ),
    ),
    (
        b"64.81.78.68\x00",
        (
            0x34CCBE4AB8829D30B177FCCF71249DD6,
            0x8E7FB7BE9D393DA4B4B8D132A92539F3,
            0x21FB6D34F2AE0C9C05010F5690F4C054,
        ),
    ),
    (
        b"64.81.78.74",
        (
            0x88C3F01B85591909B48D0FBE3CF4D845,
            0xA85E6E70C32AFFFE23C67404BE943B5,
            0x7338714045856EA182EC34C63DE3A988,
        ),
    ),
    (
        b"64.81.78.74\x00",
        (
            0x9B7A1DA7F2D3F06FF232BE2EF8970229,
            0x361D68FE059AE8263C9214C0A39397F4,
            0x44F87B885214C8D3DE67D7A9E63FD774,
        ),
    ),
    (
        b"64.81.78.84",
        (
            0x99FF742C8AEB191E595DE06CBF1B0045,
            0x90D83C9387453C035D369BA070A02AE6,
            0x45D20CC7DD160A91C076E3BF0B8B0FF2,
        ),
    ),
    (
        b"64.81.78.84\x00",
        (
            0x984495D280BA5E91A8720F0FE9C0B93E,
            0x1DEE85E47B5AF6BBE30F5958B03E59AF,
            0x239BCF3485FAB7FDC57E060FEE079ABA,
        ),
    ),
    (
        b"feedface",
        (
            0x41B2A95E11037E47986F9E80157BA42D,
            0xECBCF066FBD7E0C2E5DAEB160DD175B8,
            0xC08EDF691CF479A9EFEA3F7574F69A0A,
        ),
    ),
    (
        b"feedface\x00",
        (
            0x3E4D59EDC9001E93D769FE19AC6CC95A,
            0xA9D6DA47FADC18AFE3328ACB48609333,
            0x13537648442E81DBD8E8F2764F0E7994,
        ),
    ),
    (
        b"feedfacedaffdeed",
        (
            0xF88C084CE1A820BC73907F7AAB6AF099,
            0xE598D134B9370814453715AF4B2C3F,
            0xBBB4CA4288E94DB45B277DA2DBF8DAA8,
        ),
    ),
    (
        b"feedfacedaffdeed\x00",
        (
            0x7933511EAC30A7B1A2813BFAA3EAC5BB,
            0xC8FEE2200F0C883AE1DD35A74F414B1A,
            0x852C5106F825858CF41449F2DAF9558C,
        ),
    ),
    (
        b"feedfacedeadbeef",
        (
            0x92F45217CE9EACA374C68E0D6B95CFF,
            0xC73F56A1FADD3B51DD2FA71F7AC4AD32,
            0x99156527680788E9708F21FD4A54E777,
        ),
    ),
    (
        b"feedfacedeadbeef\x00",
        (
            0xE35330F01A9CAFE78910F5BA79528DAB,
            0xC0BF68645C6ECA7996AF0AEB821C481D,
            0x3BD51F359CCC959B360EA0C86BAC961D,
        ),
    ),
    (
        b"line 1\nline 2\nline 3",
        (
            0x942DF2A69B1E753183A4AAB6A7E09301,
            0x17727BDC9FB55AE018F569170753AC06,
            0x790FFA9AFD3606DE4D9F4BA581180344,
        ),
    ),
]


@pytest.mark.parametrize("data, expected", XX32_TEST_DATA)
def test_xxh32(data: bytes, expected: tuple[int, int, int]) -> None:
    expected_0, expected_1, expected_0xffffff = expected
    int_digest_0, int_digest_1, int_digest_0xffffff = (
        ry.xxh32_intdigest(data),
        ry.xxh32_intdigest(data, seed=1),
        ry.xxh32_intdigest(data, seed=2**32 - 1),
    )
    assert int_digest_0 == expected_0
    assert int_digest_1 == expected_1
    assert int_digest_0xffffff == expected_0xffffff

    # test the hexdigest
    hex_digest_0, hex_digest_1, hex_digest_0xffffff = (
        ry.xxh32_hexdigest(data),
        ry.xxh32_hexdigest(data, seed=1),
        ry.xxh32_hexdigest(data, seed=2**32 - 1),
    )
    assert int(hex_digest_0, 16) == expected_0
    assert int(hex_digest_1, 16) == expected_1
    assert int(hex_digest_0xffffff, 16) == expected_0xffffff

    # test the digest
    digest_0, digest_1, digest_0xffffff = (
        ry.xxh32_digest(data),
        ry.xxh32_digest(data, seed=1),
        ry.xxh32_digest(data, seed=2**32 - 1),
    )
    assert int.from_bytes(digest_0, "big") == expected_0
    assert int.from_bytes(digest_1, "big") == expected_1
    assert int.from_bytes(digest_0xffffff, "big") == expected_0xffffff


@pytest.mark.parametrize("data, expected", XX32_TEST_DATA)
def test_xxh32_hasher(data: bytes, expected: tuple[int, int, int]) -> None:
    expected_0, expected_1, expected_0xffffff = expected
    int_digest_0, int_digest_1, int_digest_0xffffff = (
        ry.xxh32(data).intdigest(),
        ry.xxh32(data, seed=1).intdigest(),
        ry.xxh32(data, seed=2**32 - 1).intdigest(),
    )
    assert int_digest_0 == expected_0
    assert int_digest_1 == expected_1
    assert int_digest_0xffffff == expected_0xffffff

    # test the hexdigest
    hex_digest_0, hex_digest_1, hex_digest_0xffffff = (
        ry.xxh32(data).hexdigest(),
        ry.xxh32(data, seed=1).hexdigest(),
        ry.xxh32(data, seed=2**32 - 1).hexdigest(),
    )
    assert int(hex_digest_0, 16) == expected_0
    assert int(hex_digest_1, 16) == expected_1
    assert int(hex_digest_0xffffff, 16) == expected_0xffffff

    # test the digest
    digest_0, digest_1, digest_0xffffff = (
        ry.xxh32(data).digest(),
        ry.xxh32(data, seed=1).digest(),
        ry.xxh32(data, seed=2**32 - 1).digest(),
    )
    assert int.from_bytes(digest_0, "big") == expected_0
    assert int.from_bytes(digest_1, "big") == expected_1
    assert int.from_bytes(digest_0xffffff, "big") == expected_0xffffff


@pytest.mark.parametrize("data, expected", XX64_TEST_DATA)
def test_xxh64_const_fns(data: bytes, expected: tuple[int, int, int]) -> None:
    expected_0, expected_1, expected_0xffffffff = expected
    int_digest_0, int_digest_1, int_digest_0xffffffff = (
        ry.xxh64_intdigest(data),
        ry.xxh64_intdigest(data, seed=1),
        ry.xxh64_intdigest(data, seed=2**64 - 1),
    )
    assert int_digest_0 == expected_0
    assert int_digest_1 == expected_1
    assert int_digest_0xffffffff == expected_0xffffffff

    # test the hexdigest
    hex_digest_0, hex_digest_1, hex_digest_0xffffffff = (
        ry.xxh64_hexdigest(data),
        ry.xxh64_hexdigest(data, seed=1),
        ry.xxh64_hexdigest(data, seed=2**64 - 1),
    )
    assert int(hex_digest_0, 16) == expected_0
    assert int(hex_digest_1, 16) == expected_1
    assert int(hex_digest_0xffffffff, 16) == expected_0xffffffff

    # test the digest
    digest_0, digest_1, digest_0xffffffff = (
        ry.xxh64_digest(data),
        ry.xxh64_digest(data, seed=1),
        ry.xxh64_digest(data, seed=2**64 - 1),
    )
    assert int.from_bytes(digest_0, "big") == expected_0
    assert int.from_bytes(digest_1, "big") == expected_1
    assert int.from_bytes(digest_0xffffffff, "big") == expected_0xffffffff


@pytest.mark.parametrize("data, expected", XX128_TEST_DATA)
def test_xxh128_const_fns(data: bytes, expected: tuple[int, int, int]) -> None:
    expected_0, expected_1, expected_2 = expected
    int_digest_0, int_digest_1, int_digest_2 = (
        ry.xxh128_intdigest(data),
        ry.xxh128_intdigest(data, seed=1),
        ry.xxh128_intdigest(data, seed=2**64 - 1),
    )
    assert int_digest_0 == expected_0
    assert int_digest_1 == expected_1
    assert int_digest_2 == expected_2

    # test the hexdigest
    hex_digest_0, hex_digest_1, hex_digest_2 = (
        ry.xxh128_hexdigest(data),
        ry.xxh128_hexdigest(data, seed=1),
        ry.xxh128_hexdigest(data, seed=2**64 - 1),
    )
    assert int(hex_digest_0, 16) == expected_0
    assert int(hex_digest_1, 16) == expected_1
    assert int(hex_digest_2, 16) == expected_2

    # test the digest
    digest_0, digest_1, digest_2 = (
        ry.xxh128_digest(data),
        ry.xxh128_digest(data, seed=1),
        ry.xxh128_digest(data, seed=2**64 - 1),
    )
    assert int.from_bytes(digest_0, "big") == expected_0
    assert int.from_bytes(digest_1, "big") == expected_1
    assert int.from_bytes(digest_2, "big") == expected_2


@pytest.mark.parametrize("data, expected", XX3_64_TEST_DATA)
def test_xx3_64(data: bytes, expected: tuple[int, int, int]) -> None:
    expected_0, expected_1, expected_0xffffffff = expected
    int_digest_0, int_digest_1, int_digest_0xffffffff = (
        ry.xxh3_64_intdigest(data),
        ry.xxh3_64_intdigest(data, seed=1),
        ry.xxh3_64_intdigest(data, seed=2**64 - 1),
    )
    assert int_digest_0 == expected_0
    assert int_digest_1 == expected_1
    assert int_digest_0xffffffff == expected_0xffffffff

    # test the hexdigest
    hex_digest_0, hex_digest_1, hex_digest_0xffffffff = (
        ry.xxh3_64_hexdigest(data),
        ry.xxh3_64_hexdigest(data, seed=1),
        ry.xxh3_64_hexdigest(data, seed=2**64 - 1),
    )
    assert int(hex_digest_0, 16) == expected_0
    assert int(hex_digest_1, 16) == expected_1
    assert int(hex_digest_0xffffffff, 16) == expected_0xffffffff

    # test the digest
    digest_0, digest_1, digest_0xffffffff = (
        ry.xxh3_64_digest(data),
        ry.xxh3_64_digest(data, seed=1),
        ry.xxh3_64_digest(data, seed=2**64 - 1),
    )
    assert int.from_bytes(digest_0, "big") == expected_0
    assert int.from_bytes(digest_1, "big") == expected_1
    assert int.from_bytes(digest_0xffffffff, "big") == expected_0xffffffff


try:
    import xxhash
except ImportError:
    ...

pytest_skip_xxhash = pytest.mark.skipif(
    "xxhash" not in sys.modules, reason="xxhash is not installed"
)


@pytest_skip_xxhash
def test_xxhash_matches_ry_xxh32() -> None:
    for seed in XX32_SEEDS:
        for data, _ in XX32_TEST_DATA:
            assert ry.xxh32(data, seed).digest() == xxhash.xxh32(data, seed).digest()
            assert (
                ry.xxh32(data, seed).intdigest() == xxhash.xxh32(data, seed).intdigest()
            )
            assert (
                ry.xxh32(data, seed).hexdigest() == xxhash.xxh32(data, seed).hexdigest()
            )


@pytest_skip_xxhash
def test_xxhash_matches_ry_xxh64() -> None:
    for seed in XX64_SEEDS:
        for data, _ in XX64_TEST_DATA:
            assert ry.xxh64(data, seed).digest() == xxhash.xxh64(data, seed).digest()
            assert (
                ry.xxh64(data, seed).intdigest() == xxhash.xxh64(data, seed).intdigest()
            )
            assert (
                ry.xxh64(data, seed).hexdigest() == xxhash.xxh64(data, seed).hexdigest()
            )


@pytest_skip_xxhash
def test_xxhash_matches_ry_xxh128() -> None:
    for seed in XX128_SEEDS:
        for data, _ in XX128_TEST_DATA:
            assert ry.xxh3(data, seed).digest128() == xxhash.xxh128(data, seed).digest()
            assert (
                ry.xxh3(data, seed).intdigest128()
                == xxhash.xxh128(data, seed).intdigest()
            )
            assert (
                ry.xxh3(data, seed).hexdigest128()
                == xxhash.xxh128(data, seed).hexdigest()
            )
