diff --git i/python/ry/ryo3/_jiff.pyi w/python/ry/ryo3/_jiff.pyi
index fcef243..6c9fc33 100644
--- i/python/ry/ryo3/_jiff.pyi
+++ w/python/ry/ryo3/_jiff.pyi
@@ -152,7 +152,7 @@ class Date(ToPy[pydt.date], ToPyDate):
     def to_py(self) -> pydt.date: ...
     def to_pydate(self) -> pydt.date: ...
     @classmethod
-    def from_pydate(cls: type[Date], date: pydt.date) -> Date: ...
+    def from_pydate(cls, date: pydt.date) -> Date: ...
 
     # =========================================================================
     # PROPERTIES
@@ -170,15 +170,13 @@ class Date(ToPy[pydt.date], ToPyDate):
     # CLASSMETHODS
     # =========================================================================
     @classmethod
-    def from_iso_week_date(
-        cls: type[Date], year: int, week: int, weekday: int
-    ) -> Date: ...
+    def from_iso_week_date(cls, year: int, week: int, weekday: int) -> Date: ...
     @classmethod
-    def today(cls: type[Date]) -> Date: ...
+    def today(cls) -> Date: ...
     @classmethod
-    def from_str(cls: type[Date], s: str) -> Date: ...
+    def from_str(cls, s: str) -> Date: ...
     @classmethod
-    def parse(cls: type[Date], s: str) -> Date: ...
+    def parse(cls, s: str) -> Date: ...
 
     # =========================================================================
     # STRPTIME/STRFTIME
@@ -343,21 +341,21 @@ class Time(ToPy[pydt.time], ToPyTime, FromStr):
     def to_py(self) -> pydt.time: ...
     def to_pytime(self) -> pydt.time: ...
     @classmethod
-    def from_pytime(cls: type[Time], t: pydt.time) -> Time: ...
+    def from_pytime(cls, t: pydt.time) -> Time: ...
 
     # =========================================================================
     # CLASS METHODS
     # =========================================================================
     @classmethod
-    def midnight(cls: type[Time]) -> Time: ...
+    def midnight(cls) -> Time: ...
     @classmethod
-    def now(cls: type[Time]) -> Time: ...
+    def now(cls) -> Time: ...
     @classmethod
-    def utcnow(cls: type[Time]) -> Time: ...
+    def utcnow(cls) -> Time: ...
     @classmethod
-    def from_str(cls: type[Time], s: str) -> Time: ...
+    def from_str(cls, s: str) -> Time: ...
     @classmethod
-    def parse(cls: type[Time], s: str) -> Time: ...
+    def parse(cls, s: str) -> Time: ...
 
     # =========================================================================
     # PROPERTIES
@@ -491,15 +489,15 @@ class DateTime(ToPy[pydt.datetime], ToPyDate, ToPyTime, ToPyDateTime, FromStr):
     def strptime(cls, string: str, /, fmt: str) -> Self: ...
     def __format__(self, fmt: str) -> str: ...
     @classmethod
-    def from_str(cls: type[DateTime], s: str) -> DateTime: ...
+    def from_str(cls, s: str) -> DateTime: ...
     @classmethod
-    def parse(cls: type[DateTime], s: str) -> DateTime: ...
+    def parse(cls, s: str) -> DateTime: ...
 
     # =========================================================================
     # PYTHON CONVERSIONS
     # =========================================================================
     @classmethod
-    def from_pydatetime(cls: type[DateTime], dt: pydt.datetime) -> DateTime: ...
+    def from_pydatetime(cls, dt: pydt.datetime) -> DateTime: ...
     def to_py(self) -> pydt.datetime: ...
     def to_pydate(self) -> pydt.date: ...
     def to_pydatetime(self) -> pydt.datetime: ...
@@ -509,11 +507,11 @@ class DateTime(ToPy[pydt.datetime], ToPyDate, ToPyTime, ToPyDateTime, FromStr):
     # CLASS METHODS
     # =========================================================================
     @classmethod
-    def now(cls: type[DateTime]) -> DateTime: ...
+    def now(cls) -> DateTime: ...
     @classmethod
-    def today(cls: type[DateTime]) -> DateTime: ...
+    def today(cls) -> DateTime: ...
     @classmethod
-    def from_parts(cls: type[DateTime], date: Date, time: Time) -> DateTime: ...
+    def from_parts(cls, date: Date, time: Time) -> DateTime: ...
 
     # =========================================================================
     # OPERATORS
@@ -680,7 +678,7 @@ class TimeZone(ToPy[pydt.tzinfo], ToPyTzInfo, FromStr):
     @classmethod
     def from_str(cls, s: TimezoneName) -> TimeZone: ...
     @classmethod
-    def from_pytzinfo(cls: type[TimeZone], tz: pydt.tzinfo) -> TimeZone: ...
+    def from_pytzinfo(cls, tz: pydt.tzinfo) -> TimeZone: ...
 
     # =========================================================================
     # PROPERTIES
@@ -694,19 +692,19 @@ class TimeZone(ToPy[pydt.tzinfo], ToPyTzInfo, FromStr):
     # CLASS METHODS
     # =========================================================================
     @classmethod
-    def fixed(cls: type[TimeZone], offset: Offset) -> TimeZone: ...
+    def fixed(cls, offset: Offset) -> TimeZone: ...
     @classmethod
-    def get(cls: type[TimeZone], name: TimezoneName) -> TimeZone: ...
+    def get(cls, name: TimezoneName) -> TimeZone: ...
     @classmethod
-    def posix(cls: type[TimeZone], name: TimezoneName) -> TimeZone: ...
+    def posix(cls, name: TimezoneName) -> TimeZone: ...
     @classmethod
-    def system(cls: type[TimeZone]) -> TimeZone: ...
+    def system(cls) -> TimeZone: ...
     @classmethod
-    def try_system(cls: type[TimeZone]) -> TimeZone: ...
+    def try_system(cls) -> TimeZone: ...
     @classmethod
-    def tzif(cls: type[TimeZone], name: str, data: bytes) -> TimeZone: ...
+    def tzif(cls, name: str, data: bytes) -> TimeZone: ...
     @classmethod
-    def utc(cls: type[TimeZone]) -> TimeZone: ...
+    def utc(cls) -> TimeZone: ...
 
     # =========================================================================
     # INSTANCE METHODS
@@ -776,9 +774,7 @@ class SignedDuration(ToPy[pydt.timedelta], ToPyTimeDelta, FromStr):
     # PYTHON CONVERSIONS
     # =========================================================================
     @classmethod
-    def from_pytimedelta(
-        cls: type[SignedDuration], td: pydt.timedelta
-    ) -> SignedDuration: ...
+    def from_pytimedelta(cls, td: pydt.timedelta) -> SignedDuration: ...
     def to_py(self) -> pydt.timedelta: ...
     def to_pytimedelta(self) -> pydt.timedelta: ...
     def to_dict(self) -> SignedDurationTypedDict: ...
@@ -787,25 +783,25 @@ class SignedDuration(ToPy[pydt.timedelta], ToPyTimeDelta, FromStr):
     # CLASS METHODS
     # =========================================================================
     @classmethod
-    def from_str(cls: type[SignedDuration], s: str) -> SignedDuration: ...
+    def from_str(cls, s: str) -> SignedDuration: ...
     @classmethod
-    def parse(cls: type[SignedDuration], s: str) -> SignedDuration: ...
+    def parse(cls, s: str) -> SignedDuration: ...
     @classmethod
-    def from_hours(cls: type[SignedDuration], n: int) -> SignedDuration: ...
+    def from_hours(cls, n: int) -> SignedDuration: ...
     @classmethod
-    def from_micros(cls: type[SignedDuration], n: int) -> SignedDuration: ...
+    def from_micros(cls, n: int) -> SignedDuration: ...
     @classmethod
-    def from_millis(cls: type[SignedDuration], n: int) -> SignedDuration: ...
+    def from_millis(cls, n: int) -> SignedDuration: ...
     @classmethod
-    def from_mins(cls: type[SignedDuration], n: int) -> SignedDuration: ...
+    def from_mins(cls, n: int) -> SignedDuration: ...
     @classmethod
-    def from_nanos(cls: type[SignedDuration], n: int) -> SignedDuration: ...
+    def from_nanos(cls, n: int) -> SignedDuration: ...
     @classmethod
-    def from_secs(cls: type[SignedDuration], n: int) -> SignedDuration: ...
+    def from_secs(cls, n: int) -> SignedDuration: ...
     @classmethod
-    def from_secs_f32(cls: type[SignedDuration], n: float) -> SignedDuration: ...
+    def from_secs_f32(cls, n: float) -> SignedDuration: ...
     @classmethod
-    def from_secs_f64(cls: type[SignedDuration], n: float) -> SignedDuration: ...
+    def from_secs_f64(cls, n: float) -> SignedDuration: ...
 
     # =========================================================================
     # PROPERTIES
@@ -1225,9 +1221,7 @@ class ZonedDateTime(
     # PYTHON CONVERSIONS
     # =========================================================================
     @classmethod
-    def from_pydatetime(
-        cls: type[ZonedDateTime], dt: pydt.datetime
-    ) -> ZonedDateTime: ...
+    def from_pydatetime(cls, dt: pydt.datetime) -> ZonedDateTime: ...
     def to_dict(self) -> ZonedDateTimeTypedDict: ...
     def to_py(self) -> pydt.datetime: ...
     def to_pydate(self) -> pydt.date: ...
@@ -1239,21 +1233,19 @@ class ZonedDateTime(
     # CLASS METHODS
     # =========================================================================
     @classmethod
-    def now(cls: type[ZonedDateTime], tz: str | None = None) -> ZonedDateTime: ...
+    def now(cls, tz: str | None = None) -> ZonedDateTime: ...
     @classmethod
-    def utcnow(cls: type[ZonedDateTime]) -> ZonedDateTime: ...
+    def utcnow(cls) -> ZonedDateTime: ...
     @classmethod
-    def from_str(cls: type[ZonedDateTime], s: str) -> ZonedDateTime: ...
+    def from_str(cls, s: str) -> ZonedDateTime: ...
     @classmethod
-    def parse(cls: type[ZonedDateTime], s: str) -> ZonedDateTime: ...
+    def parse(cls, s: str) -> ZonedDateTime: ...
     @classmethod
-    def from_rfc2822(cls: type[ZonedDateTime], s: str) -> ZonedDateTime: ...
+    def from_rfc2822(cls, s: str) -> ZonedDateTime: ...
     @classmethod
-    def parse_rfc2822(cls: type[ZonedDateTime], s: str) -> ZonedDateTime: ...
+    def parse_rfc2822(cls, s: str) -> ZonedDateTime: ...
     @classmethod
-    def from_parts(
-        cls: type[ZonedDateTime], timestamp: Timestamp, time_zone: TimeZone
-    ) -> ZonedDateTime: ...
+    def from_parts(cls, timestamp: Timestamp, time_zone: TimeZone) -> ZonedDateTime: ...
 
     # =========================================================================
     # STRPTIME/STRFTIME
@@ -1465,15 +1457,15 @@ class ISOWeekDate:
     # CLASS METHODS
     # =========================================================================
     @classmethod
-    def from_date(cls: type[ISOWeekDate], date: Date) -> ISOWeekDate: ...
+    def from_date(cls, date: Date) -> ISOWeekDate: ...
     @classmethod
-    def from_str(cls: type[ISOWeekDate], s: str) -> ISOWeekDate: ...
+    def from_str(cls, s: str) -> ISOWeekDate: ...
     @classmethod
-    def parse(cls: type[ISOWeekDate], s: str) -> ISOWeekDate: ...
+    def parse(cls, s: str) -> ISOWeekDate: ...
     @classmethod
-    def today(cls: type[ISOWeekDate]) -> ISOWeekDate: ...
+    def today(cls) -> ISOWeekDate: ...
     @classmethod
-    def now(cls: type[ISOWeekDate]) -> ISOWeekDate: ...
+    def now(cls) -> ISOWeekDate: ...
 
     # =========================================================================
     # PROPERTIES
@@ -1525,11 +1517,11 @@ class Offset(ToPy[pydt.tzinfo], ToPyTzInfo):
     # =========================================================================
     # __FROM__
     @classmethod
-    def from_pytzinfo(cls: type[Offset], tz: pydt.tzinfo) -> Offset: ...
+    def from_pytzinfo(cls, tz: pydt.tzinfo) -> Offset: ...
     @classmethod
-    def parse(cls: type[Offset], tz: pydt.tzinfo) -> Offset: ...
+    def parse(cls, tz: pydt.tzinfo) -> Offset: ...
     @classmethod
-    def from_str(cls: type[Offset], tz: pydt.tzinfo) -> Offset: ...
+    def from_str(cls, tz: pydt.tzinfo) -> Offset: ...
 
     # __TO__
     def to_py(self) -> pydt.tzinfo: ...
@@ -1550,11 +1542,11 @@ class Offset(ToPy[pydt.tzinfo], ToPyTzInfo):
     # FROM
     # =========================================================================
     @classmethod
-    def utc(cls: type[Offset]) -> Offset: ...
+    def utc(cls) -> Offset: ...
     @classmethod
-    def from_hours(cls: type[Offset], hours: int) -> Offset: ...
+    def from_hours(cls, hours: int) -> Offset: ...
     @classmethod
-    def from_seconds(cls: type[Offset], seconds: int) -> Offset: ...
+    def from_seconds(cls, seconds: int) -> Offset: ...
 
     # =========================================================================
     # TO
diff --git i/python/ry/ryo3/_size.pyi w/python/ry/ryo3/_size.pyi
index cb10fb3..1e83596 100644
--- i/python/ry/ryo3/_size.pyi
+++ w/python/ry/ryo3/_size.pyi
@@ -64,88 +64,88 @@ class Size:
     # PARSING
     # -------------------------------------------------------------------------
     @classmethod
-    def parse(cls: type[Size], size: str) -> Size: ...
+    def parse(cls, size: str) -> Size: ...
     @classmethod
-    def from_str(cls: type[Size], size: str) -> Size: ...
+    def from_str(cls, size: str) -> Size: ...
 
     # -------------------------------------------------------------------------
     # BYTES
     # -------------------------------------------------------------------------
     @classmethod
-    def from_bytes(cls: type[Size], size: float) -> Size: ...
+    def from_bytes(cls, size: float) -> Size: ...
 
     # -------------------------------------------------------------------------
     # KILOBYTES
     # -------------------------------------------------------------------------
     @classmethod
-    def from_kb(cls: type[Size], size: float) -> Size: ...
+    def from_kb(cls, size: float) -> Size: ...
     @classmethod
-    def from_kib(cls: type[Size], size: float) -> Size: ...
+    def from_kib(cls, size: float) -> Size: ...
     @classmethod
-    def from_kibibytes(cls: type[Size], size: float) -> Size: ...
+    def from_kibibytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_kilobytes(cls: type[Size], size: float) -> Size: ...
+    def from_kilobytes(cls, size: float) -> Size: ...
 
     # -------------------------------------------------------------------------
     # MEGABYTES
     # -------------------------------------------------------------------------
 
     @classmethod
-    def from_mb(cls: type[Size], size: float) -> Size: ...
+    def from_mb(cls, size: float) -> Size: ...
     @classmethod
-    def from_mebibytes(cls: type[Size], size: float) -> Size: ...
+    def from_mebibytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_megabytes(cls: type[Size], size: float) -> Size: ...
+    def from_megabytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_mib(cls: type[Size], size: float) -> Size: ...
+    def from_mib(cls, size: float) -> Size: ...
 
     # -------------------------------------------------------------------------
     # GIGABYTES
     # -------------------------------------------------------------------------
     @classmethod
-    def from_gb(cls: type[Size], size: float) -> Size: ...
+    def from_gb(cls, size: float) -> Size: ...
     @classmethod
-    def from_gib(cls: type[Size], size: float) -> Size: ...
+    def from_gib(cls, size: float) -> Size: ...
     @classmethod
-    def from_gibibytes(cls: type[Size], size: float) -> Size: ...
+    def from_gibibytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_gigabytes(cls: type[Size], size: float) -> Size: ...
+    def from_gigabytes(cls, size: float) -> Size: ...
 
     # -------------------------------------------------------------------------
     # TERABYTES
     # -------------------------------------------------------------------------
     @classmethod
-    def from_tb(cls: type[Size], size: float) -> Size: ...
+    def from_tb(cls, size: float) -> Size: ...
     @classmethod
-    def from_tebibytes(cls: type[Size], size: float) -> Size: ...
+    def from_tebibytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_terabytes(cls: type[Size], size: float) -> Size: ...
+    def from_terabytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_tib(cls: type[Size], size: float) -> Size: ...
+    def from_tib(cls, size: float) -> Size: ...
 
     # -------------------------------------------------------------------------
     # PETABYTES
     # -------------------------------------------------------------------------
     @classmethod
-    def from_pb(cls: type[Size], size: float) -> Size: ...
+    def from_pb(cls, size: float) -> Size: ...
     @classmethod
-    def from_pebibytes(cls: type[Size], size: float) -> Size: ...
+    def from_pebibytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_petabytes(cls: type[Size], size: float) -> Size: ...
+    def from_petabytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_pib(cls: type[Size], size: float) -> Size: ...
+    def from_pib(cls, size: float) -> Size: ...
 
     # -------------------------------------------------------------------------
     # EXABYTES
     # -------------------------------------------------------------------------
     @classmethod
-    def from_eb(cls: type[Size], size: float) -> Size: ...
+    def from_eb(cls, size: float) -> Size: ...
     @classmethod
-    def from_eib(cls: type[Size], size: float) -> Size: ...
+    def from_eib(cls, size: float) -> Size: ...
     @classmethod
-    def from_exabytes(cls: type[Size], size: float) -> Size: ...
+    def from_exabytes(cls, size: float) -> Size: ...
     @classmethod
-    def from_exbibytes(cls: type[Size], size: float) -> Size: ...
+    def from_exbibytes(cls, size: float) -> Size: ...
 
     # =========================================================================
     # DUNDERS
diff --git i/python/ry/ryo3/_std.pyi w/python/ry/ryo3/_std.pyi
index b1fd8ef..def872d 100644
--- i/python/ry/ryo3/_std.pyi
+++ w/python/ry/ryo3/_std.pyi
@@ -58,7 +58,7 @@ class Duration(ToPy[pydt.timedelta], ToPyTimeDelta):
     # PYTHON_CONVERSIONS
     # =========================================================================
     @classmethod
-    def from_pytimedelta(cls: type[Duration], td: pydt.timedelta) -> Duration: ...
+    def from_pytimedelta(cls, td: pydt.timedelta) -> Duration: ...
     def to_pytimedelta(self) -> pydt.timedelta: ...
     def to_py(self) -> pydt.timedelta: ...
 
